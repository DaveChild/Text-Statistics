<?php

    // Include PHPUnit
    require_once('PHPUnit/Framework.php');

    // Include the email address validator class
    require_once('../TextStatistics.php');
     
    class TextStatisticsTestCMULex extends PHPUnit_Framework_TestCase {

        /*
            
            Words failing according to the CMU pronunciation dictionary.

        */

        protected $TextStatistics = null;

        public function setUp() {
            $this->TextStatistics = new TextStatistics();
        }

        public function tearDown() {
            unset($this->objTextStatistics);
        }

        /* Test Syllables
        -------------------- */

        public function testSyllableCountFailingCMUWords() {
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aaa"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("abalone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("abare"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("abatement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("abatements"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("abbatiello"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("abbruzzese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("abed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("abeyance"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("abiomed"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("aborigine"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("aborigines"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("abounded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aboveboard"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aboveground"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("abridged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("abruzzese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("absences"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("absoluteness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("absolve"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("absolves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("abuses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ac"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("acacia"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("academically"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("academician"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("academicians"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("acceding"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("acceptances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("accion"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("accompaniment"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("accompaniments"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("accomplice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("accomplices"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("accorded"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("accordion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("accuses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("aces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aceves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("achebe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("achievement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("achievements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("achoa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("acknowledged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("acknowledgement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("acknowledges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("acknowleged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("acoustically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("acquaint"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("acquaintance"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("acquainted"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("acquiesced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("acquire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("acquired"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("acquirer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("acquirers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("acquires"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("acreage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("acuteness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("adabelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("adage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("adame"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("added"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("addeo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("addled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("adele"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("adelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("adenauer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("adieu"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("adine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("adjudged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("adlai"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("admired"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("adobe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("adorabelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("adrda"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("adrea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("advanced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("advancement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("advancements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("advances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("advantage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("advantaged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("advantageous"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("advantages"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("adventuresome"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("advertisement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("advertisements"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("advertises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("advice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("advisedly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("advisement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("advises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aegean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aeneas"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("aer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aeriens"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aeritalia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aerobically"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("aerodynamically"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("aerolineas"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aerospace"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("aerospatiale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aesthetically"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("afanasyev"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("affixes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("affluence"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("affluent"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("afforded"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aforementioned"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aforesaid"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("afsane"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("afterimage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aftertaste"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("aged"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ageless"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ages"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aggrandizement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aggressiveness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("agius"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("agne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("agonizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("agreeement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("agribusiness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aguayo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("aguiar"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("aguinaga"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("aherne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ahmed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aichi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aida"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aidan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aiguebelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aikin"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("airborne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aircoa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("airedale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("aires"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("airspace"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("aisle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("aisles"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("aithne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aiton"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("akiyama"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("alarice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("albanese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("albea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("albeit"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("albemarle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("albertville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("albion"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("alchemically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("alcoa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aldape"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("aldred"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("aldys"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("aleatory"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("alehouse"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aleksandr"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("aleman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aleo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aleshire"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("alethea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("alewife"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("alewine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("alewives"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("alfiero"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("alfonse"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("alfonsine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("alfred"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("algebraic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("algeo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("algiers"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("algonquian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("algorithm"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("algorithms"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("alguire"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aliases"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("alice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("alicea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("alicia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("alienate"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("alire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("allderdice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("allege"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("alleged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("allegedly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("alleges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("allegiance"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("allegiances"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("alleman"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("allender"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("alles"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("alliances"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("allowances"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("allspice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("allwaste"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("almaguer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aloia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aloisia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aloysia"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("alphabetically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("alphonse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("alsace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("altaic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("altarpiece"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("althea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("altice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("altomare"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("altruism"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("altruistic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("alusuisse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("alvares"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("alveolar"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("alveoli"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("alyce"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("alyea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("alyeska"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("alysia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amabelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("amadea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("amadeo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("amadeus"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("amalea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amalia"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("amaryllises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amaya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amazement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amazes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ambience"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ambient"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ambiguities"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ambitious"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ambitiously"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ambled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ambler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ambrosial"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ambrosian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ambrosine"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ambulances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amelia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ameline"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ameliorate"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amended"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("amerine"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("amezcua"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("amityville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ammonia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amorette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amperage"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("amphitheater"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("amphitheaters"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("amphitheatre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amrhein"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amusement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amusements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("amuses"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("amyotrophic"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("anachronisms"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("anacostia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("analogue"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("analyses"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("analytically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("analyzes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("anatomically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("anaya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("anchorage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("andalusian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("andean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("andrea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("andreas"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("andreini"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("andren"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("andreoli"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("andreoni"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("andreotti"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("andreozzi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("anette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("angeles"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("angelically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("angelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("angelone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("angerer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("angering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("angled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("anglen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("angove"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("anguiano"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("anisette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("annabelle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("anne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("annese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("annette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("annexes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("announced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("announcement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("announcements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("announces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("annoyance"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("annoyances"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("annuities"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("annunciata"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("anreder"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("anse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("anstice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("anstine"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("antagonisms"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("antares"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("antaya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("antenne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("anthea"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("anthes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("anthiel"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("antiabortion"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("antiapartheid"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("antigone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("antigones"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("antinuclear"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("antique"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("antiques"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("antiquity"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("antisense"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("antoinette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("antone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("antunes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("anxieties"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("anxiety"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("anxious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("anxiously"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("anyon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("anyone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("anyplace"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("anzaldua"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aoki"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("aon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aorta"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aoyama"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("apace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("apache"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("apaches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("apelike"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aphorisms"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aphrodites"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("apiece"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("apnea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("apocalypse"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("apologetically"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("apologizes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("apotheosis"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("appalachian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("appalachians"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("apparatuses"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("appearances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("appeasement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("appendage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("appendages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("appended"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("appendixes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("applesauce"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("appleyard"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("appliances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("appraises"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("appreciable"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("appreciably"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("apprehended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("apprentice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("apprenticed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("apprentices"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("apprenticeship"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("approached"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("appropriateness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aprea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("aquirre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arabe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arai"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("arakelian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("aravind"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("araya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("arbed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arbitrage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("arboreal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arceneaux"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arceo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("archaic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("archambeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("archambeault"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("archeological"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("archeology"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("arches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("archetypal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("archibeque"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("archimedes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ardelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ardine"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("arduini"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("area"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("areas"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("argonne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("arguable"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("arguably"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ariel"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ariella"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("arlette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("armbrister"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("armes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("armine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("armistice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("armitage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("arne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("arnelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("arnette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arnone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arouses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("arquette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("arranged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arrangement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arrangements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arranges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arrearage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("arrearages"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("arreola"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arrieta"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("arriortua"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arroyo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arseneau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("arseneault"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("artale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("artcarved"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("artifice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("artistically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aryan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ascended"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ascii"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("asea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("asean"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aseltine"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ashe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("asheville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("asiain"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("asian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("asians"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("asiaweek"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("asiel"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("askren"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aspires"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("aspirin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("assemblage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("assembled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("assembler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("assemblers"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("assertiveness"));
            $this->assertEquals(7, $this->TextStatistics->syllable_count("assicurazioni"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("assiduous"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("assiduously"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("assurances"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("assuredly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("astounded"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("astrogeology"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("astronomically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("astuteness"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("atalaya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("atheist"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("atheistic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("atheists"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("athenaios"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("athletically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("atlases"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("atonement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("attache"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("attached"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("attaches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("atteberry"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("attebury"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("attended"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("attentiveness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("attire"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("attractiveness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("audette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("audiences"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("audrie"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("aue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("auerback"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("aug"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("auguste"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aurea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("auspices"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("australia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("australian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("australians"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("austroasiatic"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("authement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("authentically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("authorizes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("automatically"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("automoviles"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("auxiliary"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("auyeung"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("auzenne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("avarice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ave"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("avedisian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("aveline"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aven"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("avenged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("average"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("averages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("averaging"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("averette"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("aviazione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("avice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aviles"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("avionic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("avionics"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("avions"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("avowedly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("awarded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("awareness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("awesome"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("awestruck"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("awfully"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("AWOL"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("axes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ayacucho"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ayala"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ayars"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ayatollah"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ayatollahs"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("Ayatullah"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("aydelotte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ayerst"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ayo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ayodhya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ayon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ayoub"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ayuso"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ayyad"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("azpurua"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("babbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("babblers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("babette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("babineau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("babineaux"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("babyak"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("babyish"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("baccalaureate"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bacchanalia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bachelors"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("backe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("backes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("backfired"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("backfires"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("backfiring"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("backhanded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("backlogged"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("backstage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("badeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("badeaux"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("badgering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("badges"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("baer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baez"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baffled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baggage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bahre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("baidoa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("baidoan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("baidoans"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("baidoas"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baiul"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bakeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bakeware"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bakewell"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bakke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("balaguer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("balanced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("balances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("balboa"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("baldassare"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baldrige"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("balentine"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("balfe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("baliles"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("balke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("balle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ballentine"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("balles"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("balliet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ballyhooed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("baltes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("balyeat"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bandage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bandaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bandages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("banded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bandolier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bandoliers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("banjoist"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("banke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bankes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("banque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("banville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("baoguang"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("baptisms"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baptiste"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("baptistery"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("barbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barbeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barbette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barcia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barefoot"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bareknuckle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("barentine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("barfknecht"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("baribeau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("barke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barkeley"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("barkes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barlage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("barlettesville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("barnes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barnette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baroque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barrage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barraged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("barrages"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("barres"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barrette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barrientes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("barriere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("barrilleaux"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("barrineau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("barthelme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("barthes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bartl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bartlesville"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("bartolomei"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("bartolomeo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bartone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("basaldua"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baseball"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baseballs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baseboard"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baseboards"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baseline"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baseman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("basement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("basements"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bases"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("basically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("baskerville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("baskette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("basler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("basore"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("basque"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("basques"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("basse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bassette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bassler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bastille"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bastogne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("batches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bateman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("batesville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bathe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bathed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bathes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bathke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("batte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("battelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("battiato"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("batticaloa"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("batuigas"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("baudoin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("baumler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bayard"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bayerische"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bayog"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bayonet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bayonets"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bayou"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bayous"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bayuk"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bayus"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bazemore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bbc"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bbq"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beachler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("beaird"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bearded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beata"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beato"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beatrice"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("beau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaubien"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beauce"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beauchaine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beauchamp"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beauchemin"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beauchene"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beauchesne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaudet"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaudette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaudin"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaudoin"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaudreau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaudry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beauford"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaufort"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaufrere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beaujolais"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaulac"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beaumier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaumont"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beaupre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beauregard"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beausoleil"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beautician"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beauties"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beautiful"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beautifully"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beautify"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beauty"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beauvais"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("beaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bebe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bebeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("becherer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bedient"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bedoya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bedraggled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bedrosian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beebe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beebes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("beer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("beers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("Beetlejuice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beforehand"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("befriended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("befuddled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("begeman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("begnoche"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("begonia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("begonias"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("begue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("behavior"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("behavioral"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("behaviorists"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("behaviors"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("behlke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("behne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("behnke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("behringwerke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beidaihe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beidler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beiersdorf"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beiges"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("beijer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("beilke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("beirne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beitler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("belfiore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("belge"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("belgian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("belgians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("belgique"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("belier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beliveau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("belke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("belle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("belleau"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bellefeuille"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("belles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("belleville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bellevue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("belliveau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bellone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bellville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bellyache"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("belonged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("belongia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("belote"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("belshe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beltsville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("belville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("belyea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("belyeu"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("belying"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bemusement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("benavides"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("benches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bendure"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bene"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("benecke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("benequity"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("benes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("benevides"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("bengoechea"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("benke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("benne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bennette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("benoist"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bente"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bentonville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beougher"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beowulf"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bequeath"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bequeathed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bequette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("berdine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("berea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bereavement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beresford"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bergeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bergemann"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("berges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("berghuis"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("berjaya"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("berke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("berkeley"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("berkes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("berlascone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("berle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("berlottes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bermea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bernadette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("berne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("berneice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bernice"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("berres"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("berrien"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("berte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bertilde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bertling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bertone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beseiged"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("besiege"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("besieged"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("beske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("besler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bespectacled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("besse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bessette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bessire"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bessler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("beste"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("bestiality"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bethea"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bethke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bethpage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("betrayal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("betrayals"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beucler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beumer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beutler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beuys"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beverage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("beverages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bewitched"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("beyond"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("biagioni"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("biases"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("biaxial"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bibeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bibeault"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bichler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bicycled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bicycling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("biedermeier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("biegler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bielke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bieniek"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("biennale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("biennial"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bierbusse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bierer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bierly"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("biers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bigler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bille"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("billes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("billiard"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("billiards"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bilodeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bilyeu"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("binette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("binges"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("biologically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("biomed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("biondi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("biondo"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("biondolillo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bionetics"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("biosafety"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bioscience"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("biosciences"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("birchler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("birkeland"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("birkes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("birle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("birthplace"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bisque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bissette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bissonette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bissonnette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bistodeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bitesize"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bitler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bivalve"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bivalves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bivouac"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bizarre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bizarrely"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bjerke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blakeley"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blakeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blakemore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blakeney"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blakeslee"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blakesley"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blanchette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("blanke"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("blankenbeckler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("blaschke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("blasia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("blasingame"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("blaske"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("blassingame"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("blauer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blazes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bleau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blended"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blessed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blinded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("blindfolded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("blithe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blithely"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("blitzed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blockage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("blockages"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("blonde"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("blondes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bloodshed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("blouin"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("blouses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bluest"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bluey"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bluish"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("blythe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("Bnai"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boarded"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("boardinghouses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boas"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boaz"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bobbette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bobsled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boccia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bocian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bodine"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("boehlke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("boehme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("boehne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("boehnke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("boening"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("boer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("boers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boggled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("boghosian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bogosian"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bogue"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("boguslavskaya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("boheme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bohlke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bohne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("boies"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boileau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boise"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boisseau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("boissonneault"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boldface"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boleware"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bolle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bolles"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("bollettieri"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bolognese"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bolte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bombarded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bombardier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bonaparte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bondage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bonde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bonded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bonebrake"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bonecrusher"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bonecutter"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bonenfant"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bonesteel"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bonet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bonfire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bonfires"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bongiorno"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bongiovanni"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bonine"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bonne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bonneau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bonnes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bonnette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bonneville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bonnevilles"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bonnibelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bonsignore"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bonte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bonuses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bonville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("booed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bookcases"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bookshelves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("boomeranged"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boonville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("boothe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bordeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bordeaux"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bordenave"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bordes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("borealis"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boredom"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("borges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("borgia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("borne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("borneman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bornemann"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("borneo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("boroian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("borosage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("borre"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boscia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boseman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bosler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bosse"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bothe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bottler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bottlers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bottone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boudreau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boudreaux"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bougainville"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("bougainvillea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boulette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bounces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bounded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bourbeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bourdeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bourgeois"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bourgeoisie"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bourke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bourne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bournewood"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bournonville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bourque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boutelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boutique"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boutiques"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("boutte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bovespa"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bowles"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bowne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bowse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bowyer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boxes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boyack"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("boyajian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boyan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boyar"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("boyea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boyett"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("boyington"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boyish"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("boyum"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bozeman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("braaten"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bracelet"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bracelets"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("braces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bracewell"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("braille"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("brailles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brakebill"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brakefield"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brakeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brakemen"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("brakke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bralorne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bramalea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bramlage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bramlette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brancheau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("branches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("brande"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brandeberry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("branded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("brandes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brandl"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("braque"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brasilia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brasseaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brazeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("braziers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brazilian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brazilians"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brazzaville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brcko"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("breaches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("breakage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("breathe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("breathed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("breathes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("breau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("breault"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("breaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("breezes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("breezeway"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("breitling"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("brekke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("brendlinger"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("breneman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brennecke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brenneke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brenneman"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("brentlinger"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("breon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brescia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bresette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bresse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bressette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bressler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("briarcliff"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brideau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bridegroom"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bridesmaid"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bridesmaids"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bridgeforth"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bridgehead"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bridgeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bridgeport"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bridges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bridgestone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bridgeton"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bridgewater"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bridled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("briefcases"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brien"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brierley"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("brietzke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brigadier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brigitte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brigode"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brilliance"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brilliant"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brilliantly"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("briones"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brissette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bristling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("britches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brittian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("brizendine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("broerman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brokerage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("brokerages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brokering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bronze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brookehill"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brooksville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brosseau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brossette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("brouhard"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brouillard"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brouillet"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brouillette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brousseau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("browne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brownsville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("browse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bruegge"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brueggeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brueggemann"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bruella"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bruges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bruggeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bruin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bruington"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bruins"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bruinsma"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bruises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brunches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brundage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brundige"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bruneau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brunelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brunette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("brunke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brunnhilde"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bruske"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("brusque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brusquely"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brusseau"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("brutalizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brutsche"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bruynes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bruzzese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bryan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bryans"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bryant"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bryars"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("brydges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bryen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bryon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bt"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bta"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bua"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bubbled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("Bubiyan"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bucciarelli"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("buchler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buckled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("buckler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("budai"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("budde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("budreau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("buechler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buell"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buffeted"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("buffone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bugling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buick"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buicks"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buist"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bulges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bulthuis"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bunches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bunde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bundled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bundling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bundren"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bungled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bungling"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bunke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("bunte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bunzl"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("buonocore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buoy"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("buoyancy"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buoyant"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buoyed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buoys"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("burbage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("burchette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("burdette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("burdine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("burdines"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bureau"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bureaucracies"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bureaucracy"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bureaucrat"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("bureaucratic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bureaucrats"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("bureaus"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("burke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("burkes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("burlesque"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("burne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("burnes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("burnette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("burrage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("burres"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("burriss"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buseman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("business"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("businesses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("businessland"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("businesslike"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("businessman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("businessmen"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("businesswoman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("buske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("busler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("busse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bussiere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("bustling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("butare"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("butchering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buteau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("butte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buttler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("buttonville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buyout"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("buyouts"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("buysse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("byam"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("byars"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("byas"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("byassee"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("byelorussia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("byerley"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("byington"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("byrne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("byrnes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("byus"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cabbage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cabbages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cabinetry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cabled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cableone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cabooses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cabotage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cabrales"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cacace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cacao"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("caccavale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("caccia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cacciola"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caceres"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("caches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cacioppo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cacique"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cackling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cadences"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cadorette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cadotte"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("caesarea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cafe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cafes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cafiero"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cahouet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caiazzo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("caillouet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caiola"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cairnes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("caisse"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("calabrese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("calame"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("calcote"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("calderone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("calif"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("california"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("californian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("californians"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("calle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("calles"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("calliope"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("calliopes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("caltagirone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("calves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cambridgeport"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cambridgeside"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cameo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cameos"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("camerer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("camille"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("camire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("camouflage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("camouflaged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("campanale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("campeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("campfire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("campfires"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("campion"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("campione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("campuses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("canace"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("canadienne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("canale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cananea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("candace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("candice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("candler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cangialosi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("canipe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cannes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cannone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cansler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cantone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cantrelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cantv"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("canvases"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("caouette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("capece"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("capehart"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("capelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("capetown"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("capitalizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("caplinger"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("caporale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cappiello"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("caprice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("capua"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("caracciolo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("caradine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caravelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("caraveo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carbonneau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carcione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("carded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cardiges"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cardinale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cardoen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cardone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("carefree"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caregivers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carelessness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("caremark"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("careplus"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("caresse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caretaker"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caretakers"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("caribbean"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cariello"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carinii"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("carles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("carleton"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("carlisle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carlone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carlyon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("carnage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("carne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("carnes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("carnevale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carnine"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("carre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carreon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carrere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carriages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carriere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carrion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("carriveau"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("carrizales"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cartaya"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("carte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cartersville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("carthage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cartilage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cartrette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cartridges"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("cartusciello"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("carusone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("carves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("carville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("casal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("casale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("casares"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("casciato"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cascone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("casebolt"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("caseload"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cases"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caseworker"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caseworkers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cashier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cashiers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("casler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cassese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cassette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cassettes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cassia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cassone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("casstevens"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("caste"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("castiglione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("castille"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("castine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("castorena"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cataclysm"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cataloged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("catalogue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("catalogued"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("catalogues"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cataloguing"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("catalonia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("catanese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("catania"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("catches"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("categorically"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("categorizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("catharine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("catharines"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cathmor"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("catholic"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("catholics"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cattaneo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caucasian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caucuses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("causes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("causeway"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("causeways"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cautious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cautiously"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cautiousness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cavalier"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cavaliere"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cavalierly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cavaliers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caveat"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("caveats"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("caveman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cawsl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cawthorne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("caya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cayuses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cazares"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cd"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cdebaca"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ceases"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ceausescu"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cecelia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cecere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cecilia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ceder"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ceding"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cedrone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("celaya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("celeste"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("celestine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("celia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("celosia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cenozoic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("censuses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("centerpiece"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("centerre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("centrifuge"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("centrifuges"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("centurion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ceraceous"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cercone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cereal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cereals"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ceres"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cerone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cerrone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cervone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cesare"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cespedes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cevaxs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cezanne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chadbourne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chaidez"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chairez"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("challenged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("challenges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chalmette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("chameleon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("champagne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("champagnes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("champeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("champion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("championed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("championing"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("champions"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("championship"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("championships"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chandelier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chandeliers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("changes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chaos"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chaotic"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chapelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chappelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chappuis"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("characteristically"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("characterizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("charasse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("charboneau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("charbonneau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("charest"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("charette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("charges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("charlemagne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("charles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("charleston"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("charlestown"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("charlotte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("charlottesville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("charlottetown"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("charmion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("charpentier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chases"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chasm"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("chasse"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("chaste"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chastises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chateau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chateaux"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("chausse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chechnya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chechnyan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cheeseburger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cheeseburgers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cheesecake"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cheeseman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cheeses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chelette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chemed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chemically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chenette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chengxiang"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cheong"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cheque"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cheques"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chequing"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cherne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chesler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chevalier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chevette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chevrette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("chevrier"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("chianese"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("chiang"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("chiappone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chiara"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("chicagoans"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chihuahua"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chikane"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("childe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chile"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chilean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chileans"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chisler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("chiu"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chiyoda"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chloe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chmiel"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("chmielewski"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chmura"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chocolat"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chocolate"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chocolates"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("choices"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("choiniere"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("choir"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chooses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chopsuey"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("choquette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("choreograph"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("choreographed"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("choreographer"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("choreographers"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("choreographic"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("choreography"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chortling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("choruses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chouinard"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("chrismer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("christabelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("christiana"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("christiane"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("christianity"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("christiano"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("christophe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("chronicled"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("chronologically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chrzan"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("chrzanowski"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("chseing"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chua"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("chuang"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chuckled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("chui"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("chujitsuya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("churches"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ciaccia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ciaccio"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ciampa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ciampi"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cianci"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ciancio"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cianciola"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cianciolo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cianciulli"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ciani"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ciaobella"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ciaramella"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ciaramitaro"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ciaravino"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ciardi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ciarlo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ciavarella"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cicalese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ciccone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cicely"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cigarette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cigarettes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cilicia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cinque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ciocca"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ciolino"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ciotti"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("circled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("circling"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("circuitous"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("circumference"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("circumstances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("circuses"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ciriello"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cirincione"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cirque"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cirrincione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cisler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cistercian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cityfed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cityplace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ciucci"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ciulla"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ciullo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("civilian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("civilians"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("clague"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("claiborne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("clairvoyance"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("clarabelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("claremont"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clarette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clarice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("clarion"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clarisse"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("clarke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clarksville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clarrisse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("classically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("claudette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clauses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clavette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clayborne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("claybourne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clayey"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cleah"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cleanse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("clearances"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("clearinghouses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cleavage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cleaveland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cleo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cleopatra"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cleveland"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("clevelanders"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clevetrust"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cliche"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cliched"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cliches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cliffe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("climaxes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clinches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("clinician"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("clinicians"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("clique"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cliques"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("clodoveo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cloey"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("closedown"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("closedowns"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("closeness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("closes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("clothe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("clothed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("clothes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clotheshorse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clothestime"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clothier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clothiers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clothilde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clouatre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("clubhouses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cluett"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clutches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clyatt"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("clydesdale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cmon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cmos"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cmx"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coaches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coady"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("coale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coalesced"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("coals"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coalson"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coate"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coates"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coatesville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("coaxed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coaxum"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cobbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cobbler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cobblers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coccia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cochlea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cochlear"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cocke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cockroaches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coddled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coderre"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coeds"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("coeducational"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coefficient"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coefficients"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coelho"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coello"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coenen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coenzyme"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coequal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coerce"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coerced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coercing"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coercion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coercive"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("coeur"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coexist"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coexisted"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coexistence"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coexisting"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coey"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cogema"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("coglianese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cohea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cohesiveness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coinage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coincide"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coincided"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coincidence"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("coincidences"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coincident"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("coincidental"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("coincidentally"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coincides"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coinciding"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coinsurance"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cointreau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cojuangco"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("colaianni"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coldren"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("colebank"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("colebrook"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("colegrove"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coleman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coleridge"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coleslaw"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("colestipol"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("colestock"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("colette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coleus"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coline"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coliseum"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("collage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("collages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("collapse"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("colle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("colleague"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("colleagues"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("college"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("colleges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("collegeville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("collegians"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("collegiate"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("collette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("colleville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("collier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("colliers"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("collodion"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("colloquial"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("colloquium"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cologne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("colonel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("colonels"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("colorfully"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("colosseum"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("colourful"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("colville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("comanche"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("comanches"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("combativeness"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("combe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("combes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("comeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("comeaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("comeback"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("comebacks"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("comedienne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("comedown"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("comfed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("commanded"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("commemorative"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("commenced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("commencement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("commences"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("commended"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("commercebancorp"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("commerciale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("commerical"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("commingled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("commingling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("commonplace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("compeau"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("competitiveness"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("complementary"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("completeness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("complexes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("composes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("compounded"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("comprehended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("comprises"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("compromises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("comrie"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("comunale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("conceding"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("concepcion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("concierge"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("concorde"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("concubinage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("conde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("condense"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("condolences"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("condren"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("condry"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("conduit"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("conduits"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coneflower"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("conferences"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("conferencing"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("confidante"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("confidences"));
            $this->assertEquals(7, $this->TextStatistics->syllable_count("confidentiality"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("confinement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("confluence"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("confounded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("confucian"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("confucianism"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("confuses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("congenial"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("congruence"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("connely"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("conquer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("conquers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("consciences"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("consequences"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("conserved"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("consortiums"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("conspire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("conspired"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("constituencies"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("constituency"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("constituent"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("constituents"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("construcciones"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("contagious"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("contagiousness"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("conte"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("contemptuously"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("contended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("contentious"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("contentiousness"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("continuances"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("continuum"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("contrivances"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("controversial"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("conveniences"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("converged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("conveyance"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("conveyor"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("conville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("convinced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("convinces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("conyer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("conyers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coogler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("coombe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("coombes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cooperage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cooperate"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("cooperated"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cooperates"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("cooperating"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("cooperation"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("cooperations"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("cooperative"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coordinate"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("coordinated"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coordinates"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("coordinating"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("coordination"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("coordinator"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("coordinators"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("copeland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("copeman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("copiague"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coplen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coppage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("copytele"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("corabelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("corbusier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("corded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cordes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cordial"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cordially"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cordry"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("corea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("corestates"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coretech"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("corette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("corinne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("Corleone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("corne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cornea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("corneas"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cornelia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cornelius"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cornelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cornette"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("corporacion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("corporatewatch"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("corporatewide"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("corpse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("corrales"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("correa"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("corresponded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("corriveau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("corsage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("corte"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cortes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cortese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("corvette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("corvettes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("corzine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coscia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cosette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cosme"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cosmetically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cossette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("coste"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cotelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cothren"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cotler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cotrone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cotroneo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cottage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cottages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cottone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("couches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("couillard"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("couldnt"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("countenanced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("countenances"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("counterbalanced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("countercharges"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("counterespionage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coupled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("courage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("courageous"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("courageously"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("courchesne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("courteau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("courtemanche"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("courthouses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("courville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cousineau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coval"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coverage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coverages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("covering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coverings"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("coviello"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("coville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cowardice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cowering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coyote"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("coyotes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cozine"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("crabbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crackled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cradling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cranesbills"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("crary"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("crawfordsville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crayon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crayons"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("creager"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("create"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("created"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("creates"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("creating"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("creation"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("creationism"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("creations"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("creative"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("creatively"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("creativity"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("creator"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("creators"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("creer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("creole"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("creoles"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("creolized"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("creosote"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crepeau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("creque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cressler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crevice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("crevices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cribbage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("crimea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cringes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crippled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("criscione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("crisler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cristiani"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cristiano"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("criterion"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("criticisms"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("criticizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("critique"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("critiques"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("crnkovich"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("croat"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("croatia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("croatian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("croatians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("croats"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("croce"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crocheted"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("crocuses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cronauer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cronyism"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crooked"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("crosse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crosspiece"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("crosspieces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("croteau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("crotonville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crotteau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("crounse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crovl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crovls"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crowded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("crowne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crownx"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crozier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cruces"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("crucifixes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cruea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cruel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cruey"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cruikshank"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cruises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crumbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crumpled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("crumpler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crunches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("crutches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cryan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cryolite"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("crysler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("csaszar"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cubbage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cuccia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cuddeback"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cuddled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cuddling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cuello"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("cuffe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cuneiform"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cuneo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cunliffe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cureton"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("curiale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("curnutte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("curtice"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("curves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cutaia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cuteness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cutesy"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cutrone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cuvelier"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cuyahoga"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cxc"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cyacq"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cyanamid"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cyanazine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cyanide"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cyanuric"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cyberspace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cyclades"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("cycled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cycling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("cyclist"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cyclopean"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cytherea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("cytoplasm"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dabbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dadeland"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dague"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dahlia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dahlke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dahnke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("daigneault"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("daiichi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("daleo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dalgleish"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dalia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dalke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("daloia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dalpe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("damage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("damaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("damages"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dambrosia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("damewood"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("damien"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("damietta"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("damme"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dances"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dandelion"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dandelions"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dandeneau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dandrea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dandyism"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("danelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("danese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dangled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dangler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dangling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("daniele"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("daniello"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dannemeyer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dansereau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("danske"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("danville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("daoud"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("daoust"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dapice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("darbonne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("daredevil"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("darice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("darien"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("darke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("darrelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("darville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("daseke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dassler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("databases"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("datapower"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dateline"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("datelines"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("davide"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("daya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dayan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dazzled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dbase"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ddt"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("deactivated"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dealba"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deana"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deanda"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deandrade"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deandrea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("deangelis"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deanna"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deathbed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deatherage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("debasement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("debiase"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("debora"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deborde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("debrosse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("debruin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("debutante"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("debutantes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("debuted"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("decapua"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("decelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("decelles"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("decesare"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("decisiveness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("declerque"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("decomposes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("decorative"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("decoteau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("decreases"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dedeaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deduce"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deduced"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("deemphasizing"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("deer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("defaced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("defarges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("defelice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("defended"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("defense"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("defenseless"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("defensiveness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("defeo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("defiore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("defrates"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("degaetano"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("degaulle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("degeorge"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("degiacomo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("degrace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("degrave"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deguire"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("degutare"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dehne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dehoyos"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("deification"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deify"));
            $this->assertEquals(9, $this->TextStatistics->syllable_count("deinstitutionalization"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deisher"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deism"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deities"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deity"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dejarnette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("delage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("delatte"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("delaurentiis"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("delbene"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("delbosque"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("delcine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("delebarre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deleo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deleon"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("deleonardis"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("delfine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("delfosse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("delgiorno"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("delgiudice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("delguidice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("delia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("delicia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deline"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("delineate"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("delineated"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("delineates"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("delineating"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("delineation"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("delisle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("deliverers"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("delivering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("delle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("delmed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deloitte"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("delorean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("delores"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("delosreyes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("delphine"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("delpriore"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("delre"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("delsignore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deltaic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deluccia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("delucia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deluge"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deluged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deluise"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("delve"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("delves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("demagogue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("demagogues"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("demanded"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("demarest"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dematteo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("demayo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dementia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("demeo"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("demilitarizes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("demme"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("democratically"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("demographically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("denarii"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("denatale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deneau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deneault"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dengler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("denice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("denlinger"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("denne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("denomme"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("denouement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("denounced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("denounces"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dense"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("densely"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dente"));
            $this->assertEquals(7, $this->TextStatistics->syllable_count("denuclearization"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("denuclearized"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("deodorant"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("deodorants"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("deoliveira"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deon"));
            $this->assertEquals(8, $this->TextStatistics->syllable_count("deoxyribonucleic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dep"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("depace"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("depascale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("depasquale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("depended"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("deployable"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("deppe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("depreciable"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("depriest"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deranged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dercole"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("derflinger"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("derosia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("derouen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("derouin"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("derousse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("desai"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("desantiago"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("descartes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("descended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("deschler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("descoteaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deserved"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("deservedly"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deserves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deshaies"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("desimone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("desire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("desired"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("desires"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("desiring"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deslatte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("desormeaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("desperate"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("despises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("desroches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dessauer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("desselle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("detached"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("detente"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("deterioration"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("determinedly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("detherage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("detore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dettling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dettore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deutschemark"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deutschemarks"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deveau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deveaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("develle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("devere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("devereaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("device"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("devices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("devilish"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("devillier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("devises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("devour"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("devoured"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("devouring"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("devours"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dewilde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dewitte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dewolfe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deyo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deyoe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("deyoung"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dhlakama"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("diabetes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("diagnoses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dialogue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dialogues"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("diamond"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("diamonds"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dianne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dianthia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("diaper"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("diaphonia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("diarrhea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("diastole"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("dibartolomeo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dibbled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dibiase"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("diceon"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dicesare"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dichroic"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dicke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dickes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dicomed"));
            $this->assertEquals(7, $this->TextStatistics->syllable_count("dideoxycytidine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("didion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("diego"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("diener"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dienst"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dieringer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dierkes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dierking"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dieses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("diet"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dietary"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dieters"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dietetic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dieting"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dietitian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dietitians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dietl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("diets"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("Dieu"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("diez"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("difelice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("differences"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("differentiate"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("differentiated"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("differentiates"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("differentiating"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("differentiation"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("differently"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("diffuses"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("difiore"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("digiacomo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("digioia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("digiovanna"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("digiovanni"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("diguglielmo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("diianni"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("diiorio"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dikeman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dildine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dileo"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("dileonardo"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dille"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("diltiazem"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dimare"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dimatteo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dimeo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dimichele"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dimpled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dinatale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dinehart"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dinges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dingler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dinmukhamed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dinse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("diona"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dione"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("dionisio"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("dionysius"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("diorio"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dipaola"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dipaolo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dipasquale"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("diplomatically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("directv"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dirkes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dirkse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disabled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("disadvantage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("disadvantaged"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("disadvantageous"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("disadvantages"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("disallowances"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("disappearances"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("disassembled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disbanded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disbursement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disbursements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("discarded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("discharged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("discharges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("discloses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("discotheque"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("discourage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("discouraged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("discouragement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("discourages"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("discovering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("diseases"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("disenfranchisement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disengage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disengaged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("disengagement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dIsere"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("disgorged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disgorgement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("disgrace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("disgraced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disgraceful"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("disgruntling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disguises"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("disimone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("disinterested"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("diskette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("diskettes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dislodged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disloyal"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("disloyalty"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dismantling"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("disorient"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("disorientation"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("disoriented"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("disorienting"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disparage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disparaged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("disparages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dispatched"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dispatches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dispense"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("displace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("displaced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("displacement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("displacements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("displaces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disposes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("disque"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("disregarded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("disservice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dissolve"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dissolves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dissuade"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dissuaded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("distanced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("distances"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("distaste"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("distasteful"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("distended"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("distinctiveness"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("disturbances"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ditches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("diverged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("divergences"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("diverges"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("divisiveness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("divorced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("divorces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("divulged"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dk"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dlouhy"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dlugos"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dlugosz"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dmitri"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("doable"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dobrzynski"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dodges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("doenges"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("doepke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("doer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("doerfler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("doerflinger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("doering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("doggedly"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dogmatically"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dohme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dohse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("doin"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dolce"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dolle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dolores"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("domangue"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("domestically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("domine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("domingue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dominique"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("domke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("donde"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dondlinger"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("donne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("donze"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("doonesbury"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("doppler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("doralynne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("doraville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dorea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dorette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dorice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dorine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dorion"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dornier"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dorothea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dOrsay"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dorthea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dosage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dosages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("doses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dosia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dossier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dossiers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("doubled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("doubtfire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("doubtfires"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("doucette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("douglass"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dour"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("douville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dovetail"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dovetailed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dovetails"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dower"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dowers"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("downe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("downes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("downstage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dowse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("doyal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("doyel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("doyen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("doyon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("drainage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dralle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dramatically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dramatizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("drapeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("drastically"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("drawer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("drawers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("drechsler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dredges"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dreher"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dressage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dressler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dribbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("driveway"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("driveways"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("drogue"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("droste"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("drouillard"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("drouin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("druella"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("druid"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("druidism"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("druids"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dsouza"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dualisms"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("duane"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duarte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dubeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dubilier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dubreuil"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dubuque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ducharme"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duchenne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("duchesneau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dudayev"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duel"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("duelist"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duels"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("duena"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("duenas"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("duesler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duet"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duets"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duey"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dufresne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duis"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dukakises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dukedom"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dukeman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dulcea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dulciana"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dulcibelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dulcinea"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dulle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dullea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dumbfounded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dumire"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duncombe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dunmire"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dunne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("duodenal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duong"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("duopoly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dupler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dupriest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dupuis"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("duque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duquesne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("duquette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("duramed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("durette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("durflinger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("duryea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dusseau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dusseault"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("duvalier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("duvaliers"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("dwelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dwindled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dwindling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dyad"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dyal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dyana"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dyane"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dyansen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dyar"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dyas"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dyatron"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dyazide"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dyches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dyess"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("dykeman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("dyslexia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("dzhirkvelov"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eagleye"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("earle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("earles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("easement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eases"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("eastes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("easudes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("eau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("eaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eavesdrop"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eavesdropping"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eblen"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("eckes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eckl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eclipse"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ecologically"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("economically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ecstatically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ecuador"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ecuadoran"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ecuadorian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("edgecomb"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("edgecombe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("edgemon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("edges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("edgeways"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("edgewood"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("edgeworth"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("edifice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("edinburgh"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("edithe"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("edizione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("edouard"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("edrea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("edrington"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eduard"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eduardo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("edythe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("effectiveness"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("efficiences"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("effler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("effluent"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("egerer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("egoism"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("egregious"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("egregiously"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ehle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ehlke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ehrke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("Ehud"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eichler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eiermann"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eifler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eightieth"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eiichi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eiseman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eisemann"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ekkehard"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("elaborate"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("elaborately"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("elapse"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("elbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eldred"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("electrician"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("electricians"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("electricite"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("electrique"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("electrospace"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("elementary"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("eleonore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eletr"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("elinore"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("elkes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("elle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ellerbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ellesmere"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ellesse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ellette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ellice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ellipse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ellithorpe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("elmes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("else"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("elsea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("elsevier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("elsewhere"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("elusiveness"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("elves"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("elysia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("emanuel"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("emanuele"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("embed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("embedded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("embezzled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("embler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("embolisms"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("embrace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("embraced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("embraces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("embryo"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("embryology"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("embryonic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("embryos"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("emde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("emerald"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("emeralds"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("emerged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("emerges"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("emeryville"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("eminase"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("eminences"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("emlynne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("emmaline"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("emmanuel"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("emme"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("emotionally"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("emphases"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("emphasizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("emphatically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("emphysema"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("empire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("empires"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("emplacement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("employable"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("employee"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("employees"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("empowering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("emslie"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("emuil"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enabled"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("encarnacion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("encircled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("encircling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("encourage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("encouraged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("encouragement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("encourages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("encroached"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("encroaches"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("endangering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ende"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("endorsement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("endorsements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enea"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("energetically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enfeebled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("enforced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enforcement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enforces"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("enfranchises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("engage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("engaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("engagement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("engagements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("engages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("engelke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("engeman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("engler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("enhanced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enhancement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enhancements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enhances"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("enholme"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("enjoyable"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("enke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("enlarged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enlargement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enlargements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enlarges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ennea"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ennes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ennui"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("enrage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("enraged"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("enriched"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enriches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ensconced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enslavement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enslen"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ensminger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("entangled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("enterprises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enthuses"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("enthusiasm"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("enthusiasms"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("enthusiastically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("entice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("enticed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enticement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("enticements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("entire"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("entirely"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("entitling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("entourage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("entranced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("entrances"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("entrenched"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("entrenches"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("entringer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("entsminger"));
            $this->assertEquals(8, $this->TextStatistics->syllable_count("environmentalism"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("envisage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("envisaged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("envisages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eocene"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eoff"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("eohippus"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("eolande"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eons"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("epicurean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("epilogue"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("epitome"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("epitomizes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("eppes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eppler"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("equiangular"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("equity"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eranthe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("erases"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("erbe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("erbes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ercole"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("erion"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("eritrea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("eritrean"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("erne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("erratically"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("erte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ertl"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("erythropoietin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("escapement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("esler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("eslinger"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("esme"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("espalier"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("espe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("especially"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("espionage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("espouses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("esquer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("essayist"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("esse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("est"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("este"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("estelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("esteves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("estranged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("estrangement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("etc"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("etches"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ethereal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ethnically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ethyol"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("etiquette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ettlinger"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("etzioni"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("euan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("euchred"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("euclea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eudocia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("eudosia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eunice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("euphemisms"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("euphemistically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("euphrates"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eurasian"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("euromissiles"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("euromobiliare"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("european"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("europeans"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("europeenne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("europewide"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("euroyen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eustace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eustacia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eustice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("evansville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eveland"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("evenhanded"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("evenhandedly"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("evening"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("evenings"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("everage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("everette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("everybody"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("everyday"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("everyman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("everything"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("everytime"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("everywhere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("evidenced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("evidences"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("evidentiary"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("evinced"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("evolve"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("evolves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("evonne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("exchanged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("exchanges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("exchequer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("excises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("excitement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("excoa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("excuses"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("exercises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("exes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("expanded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("expanse"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("expeditious"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("expeditiously"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("expended"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("expense"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("experience"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("experienced"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("experiences"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("experiencing"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("expires"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("exposes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("expounded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("expunged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("extended"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("extraordinaire"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("eyepiece"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("eyerman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ezelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fabled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("facedown"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("faceless"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("facelift"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("facemire"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("faces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("facetious"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("facetiously"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("faciane"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("facsimile"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("facsimiles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("facteau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fagundes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fahnestock"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("faiola"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("faist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("falardeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("falcone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("falke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("false"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("falsehood"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("falsehoods"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("falsely"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("falzone"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("famiglietti"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("familial"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("familiar"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("familiarity"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("familiarize"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("familiarized"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fangled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fansler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fantasizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fantastically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fanueil"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("farace"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("faraone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("farese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("farewell"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("farewells"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("farfetched"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fariello"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("farmhouses"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("farnes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("farquhar"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("farruggia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("farrugia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fasone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fassler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fatigue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fatigued"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fatigues"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("faubion"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("faucette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("favale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("favreau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fawkes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("faxes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fayard"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fayetteville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fayez"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("faymonville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("FDIC"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fealty"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("feb"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("feces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fecteau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fejes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("felde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("felice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("felicia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("felrice"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("felske"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("feltes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("femme"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fences"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fencl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fended"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fenske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("feodor"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("feodora"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("feola"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ferraioli"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ferre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ferriss"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ferrofluidics"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ferrone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fertilizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fesler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fessler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fetches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fettes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fetuses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fiance"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ficke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fickes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fictitious"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fiddled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fiddling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fidelia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fidler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fielded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fieros"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fiers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fiery"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fiesta"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fiftieth"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("figaroa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("figler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("figueira"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("figueiredo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("figueroa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("figurehead"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fildes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("filenet"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("filice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fillingame"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("filyaw"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("finale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("financed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("financement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("finances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("financier"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("financiera"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("financiero"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("financiers"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("finanziaria"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("finarte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("finches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fincke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("findling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fineberg"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("finefrock"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("finegold"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fineman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("finesse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("finestone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("finevest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fingering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("finke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("finklea"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("finne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fiona"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fiore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("firearm"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("firearms"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("firebaugh"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("firebombed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("firebombs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fired"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("firefight"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("firefighter"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("firefighting"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("firehouses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fireman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("firemen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fireplace"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fireplaces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("firepower"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fires"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("firestone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("firestorm"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fireworks"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("firstier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fischl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fischler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fisette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fishburne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fiske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fisler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fitzhenry"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fitzmaurice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fitzwilliam"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fivecoat"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fivefold"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fixes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fizzled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("flaharty"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("flaherty"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("flamboyance"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("flamboyant"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("flamboyantly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("flamemaster"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("flanges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("flavr"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fleer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fleurette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("flexes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("flightsafety"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("flirtatious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("florea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("flores"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("florine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("flounces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("flour"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("flours"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("flowering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fluency"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fluent"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fluid"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fluidity"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fluids"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fluitt"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fluor"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("flythe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("focuses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fogler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("foie"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("foiles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("folded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("folkes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("follette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("folliard"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("folse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("foncier"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("fondiaria"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fondren"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fonte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fontenette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fonville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("foodservice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("footage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("footrace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("forage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("forages"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("forbes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("forcefulness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("forces"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("forde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fordyce"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("forecloses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("forensic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("forensics"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("forest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("forested"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("forester"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("foresters"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("forestry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("forests"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("foretaste"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("forex"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("forges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("forgette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("forgione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("forgiveness"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("forgue"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("formalizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("formulaic"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fornes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("forquer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("forsythe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fortieth"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fortuitous"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("forwarded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fosler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fosse"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("foulke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("foulkes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("founded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("foward"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fowkes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fowlkes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("foxes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("foxmeyer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fractious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fractiousness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fradette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fragale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fragrances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fraioli"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("framework"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("francese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("franchises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("francia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("francisville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("francke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("francoeur"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("franke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("frankincense"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frankl"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("franze"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("franzese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("franzone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frashier"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fratzke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frazier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frazzled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frechette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("freckled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("freda"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frederic"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frederick"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fredericks"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fredericksburg"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fredette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("freest"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("freezes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fregeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("freia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frenette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("freon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("freons"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("freya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("freyermuth"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fricke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frie"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("friedl"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("friis"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fringes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("friona"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("friscia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("friske"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fritze"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fromme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fronde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frontage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frontier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("frontiers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fruin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fruition"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fruity"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("frunze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fryar"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("FSLIC"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fuchsias"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fuel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fueled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fuelled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fuels"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fuer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fugue"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fugues"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fujiya"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fujiyama"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fukui"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fukuoka"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fukuyama"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fullilove"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fumbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("funches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("funded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("funderburke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("funke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fuoco"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("furches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("furloughed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("furnace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("furnaces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("furuya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fuselage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("fuselages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("fuselier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fuses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("fuzes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fyffe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("fyffes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gabbroic"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gabehart"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gabele"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gaboriault"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gabriel"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gabriela"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gabriele"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gabriella"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gabrielli"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gabrys"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gaccione"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gaffe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gaffes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gaglione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gaia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gainesville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("galarneau"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("galatea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("galea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("galentine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("galesburg"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("galiena"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("galilean"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("galileo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("galipeau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("galle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gallentine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("galleon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("galleons"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("galles"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("galyean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("galyen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("galyon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gamage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gambale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gambled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gambler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gamblers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gamboa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gamesmanship"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gammage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gamunde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gangl"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ganglionic"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ganske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gaona"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("garage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("garages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("garbage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("garbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("garbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("garceau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("garces"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("garde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gardea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gardenia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gardenias"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gardiner"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gareau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("garges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("garneau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("garnes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("garnette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("garoutte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("garrette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("garske"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gartzke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gases"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gasque"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gastineau"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("gastrointestinal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gatekeeper"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gatekeepers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gateway"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gateways"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gatewood"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gatx"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gatzke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gaudette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gaudreau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gauerke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gauges"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gaulke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gaulle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gauthreaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gautreau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gautreaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gauvreau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gawne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gazelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gazelles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gazes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gazette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gdansk"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geagea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gearboxes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gedeon"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("geerdes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("geers"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gehres"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gehrke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("geissler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gelasia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gelette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gelineau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gelles"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gemayel"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gemme"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gendarme"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gendreau"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("genealogy"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("generales"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("generically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("genetically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gengler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("genial"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("genitalia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("genius"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("genoa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gensia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("genske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gensler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gentlest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("genuine"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("genuinely"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("geo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geocentric"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("geochemistry"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geodesic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geodesy"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("geodyne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geoffrion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("geoffroy"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geographer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geographic"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("geographical"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("geographically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geography"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geologic"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("geological"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geologist"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geologists"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geology"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("geomagnetic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geometric"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("geometrical"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geometries"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geometry"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("geomorphology"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("geon"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("geophysical"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("geopolitical"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("geopolitics"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("geordie"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("georg"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("georges"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("georgeson"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("georgetown"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("georgette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("georgi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("georgia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("georgiades"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("georgian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("georgians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("georgiou"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geostrophic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geosyncline"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geotaxis"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("geotek"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geothermal"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("geotropic"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("geotropism"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gerace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gerdeman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gerdes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gericke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("geringer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gerke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("germe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gertler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("geschke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("geske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("geyelin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gfeller"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ghanaian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ghanaians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("giacco"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giacinta"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giacobbe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("giacomelli"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("giacomini"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giacomo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("giacone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("giaimo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gialanella"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giambalvo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("giambra"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giammarco"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("giammarino"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("giampa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giampaolo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giampietro"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giancola"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gianelli"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gianfrancesco"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giangrande"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gianino"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("giannattasio"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giannelli"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giannetti"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giannetto"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gianni"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giannini"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giannola"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giannotti"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gianotti"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giaquinto"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giardina"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giardini"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giardino"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("giarratano"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giarrusso"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gibeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gibeault"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gideon"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gier"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gierke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("giesecke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gieske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giesler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("giggled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giggly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giguere"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gilberte"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gilbertine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gilchrest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gilcrest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gildea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gilded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gilkes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gille"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gilles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gillette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gioia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gionet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giordani"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giordano"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("giorgi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("giorgia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("giovanelli"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("giovanetti"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("giovannetti"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("giovannini"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("giovannoni"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giovenco"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("giovinazzo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("giraffe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("giraffes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("girdler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("girouard"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("giselle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gisler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gittler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("giudice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("givebacks"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gjerde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("glacier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("glaciers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("glances"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("glanville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("glazebrook"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("glazes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("glenfed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("glenville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("glidewell"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("glimpse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("glitches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gloucester"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("glowering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("glyndebourne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goates"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gobbled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gocke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goddeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("godette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("goecke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("goedde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goedecke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("goemon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("goering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("goerke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("goethe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("goette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("goetze"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("goewey"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gohlke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("golde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("goldfeder"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("goldfinches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goleman"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("golembiewski"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("golle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gomes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gondolier"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gonorrhea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gonyer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gonzales"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goodreau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gooseberry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goosefish"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goosefoot"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goracke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gordeyev"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("Gordievsky"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gorgeous"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gorges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gossage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gosse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gottesman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goudeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goudreau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gouin"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goulette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("govea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("govpx"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("goyim"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("grabbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("graceful"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gracefully"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("graceland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("graceless"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("graces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gracia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("graffeo"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("grahams"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grambling"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("grande"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("granges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("granville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grapefruit"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grapefruits"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grapeshot"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grapevine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grapevines"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("graphically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grappled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grappling"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("grasse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("grassia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gratuities"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gratuitous"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("gratuitously"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("graue"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("graunke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("graveline"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gravelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gravette"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("gravitationally"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grayish"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("greasewood"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grecian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("greenhouses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("greeniaus"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("greenpeace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("greenville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("greer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("greinke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("grelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("grenouille"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("greunke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("griesa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("grievances"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("grille"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grimaced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("grimaces"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("grimme"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grinage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("grinde"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("grismer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grizzled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grobler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("groene"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("groening"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("groleau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grolier"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("grosse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grosvenor"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grotesque"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("grotesquely"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("grothe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grotheer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grounded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("groupement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grouses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("groveman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grua"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grudges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gruel"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("grueling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gruet"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gruhlke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gruis"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("grulke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grumbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grunebaum"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("grzelak"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("grzesiak"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("grzeskowiak"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("grzyb"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("grzybowski"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("grzywacz"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("grzywinski"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gschwind"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gsell"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gtech"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("guadarrama"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guarded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("guardedly"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("guayabera"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gucciardo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("guccione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guenette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guerette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("guerre"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guerrette"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("guglielmetti"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("guglielmi"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("guglielmo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("guiana"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guidebook"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guidebooks"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guideline"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guidelines"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guidepost"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guideposts"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guidice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("guidone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("guidry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guilbeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guilbeault"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guilbeaux"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("guillemette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guillette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guillotte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guilmette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guinier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guisewite"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("gullette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gundry"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gunfire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gurgling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gurion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gurtler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guseman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gusler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("gustave"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("guste"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("guyana"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guyett"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guyon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guyot"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("guzzler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gvaryahu"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("gwynne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("gymnasia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("haacke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("habeas"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("haberer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hachette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hacienda"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hacke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hackl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hackler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hades"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hadler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("haering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("haeussler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hafeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hageman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hagemann"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hagewood"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("haggled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hague"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hahne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("haist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hajime"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("halcion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("halcyon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("halcyone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("haldeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hallbauer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("halle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("halteman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("halve"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("halves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hamblen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hamler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hamme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hammes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hampe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hamtramck"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("handed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("handedly"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("handled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hanemann"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hanke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hankes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hanneman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hannemann"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hannes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hansche"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hanseatic"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hapeman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("happe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("haque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("harangue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("harangued"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("harangues"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("haranguing"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("harare"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("harclerode"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hardage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hardebeck"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hardeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hardwicke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("harebrained"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("harewood"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("harke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("harleysville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("harmes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("harnage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("harne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("harpe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("harre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("harriette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("harte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hartl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hartlage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hartshorne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("haruo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("harville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("haschke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("haseman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("haske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hasler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hass"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hasse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hassled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hassler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("haste"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hatches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hatheway"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hathorne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hatler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("haueter"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hauppauge"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hausler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("havelock"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("haveman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hawaii"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hawaiian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hawaiians"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hawke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hawkes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hawkiness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hawthorne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hayashi"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hayashida"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("haydn"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hayek"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hayen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hayenga"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("haynesworth"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hbox"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hces"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hearne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("heavyhanded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heberer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hebrides"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heckled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hedgecock"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hedgehog"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hedgehogs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hedgepath"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hedges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heffler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hegeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hehmeyer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heidbreder"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heideman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heidemann"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heidler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heiges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heigl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heikes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heileman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heindl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heinecke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heineman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heinemann"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heinicke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("heinke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heinl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heinlen"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("heintze"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("heinze"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heishman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heisler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("helbling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("helice"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("helionetics"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("helke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("helle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("helme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("helmes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("helmke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hemme"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("hemocyanin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hemorrhage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hemorrhaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hempfling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("henceforth"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hendren"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hendrie"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("henke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("henkes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("henne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("henneberger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("henneberry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("henneman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hennes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("henrie"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("henriette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("henrique"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hense"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hensler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hentges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("henthorne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("henze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heon"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("heppe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("heppler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heralded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("herbaceous"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("herculean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hercules"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("herded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hereby"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("herendeen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heretofore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("herewith"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heritage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hermitage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hernandes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("herne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heroic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heroics"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heroin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heroine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heroines"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("heroism"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("heroized"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("herre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("herriage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("herrlinger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hertzler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hesler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hesse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hessian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hessler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hestia"));
            $this->assertEquals(7, $this->TextStatistics->syllable_count("heterogeneity"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("heterogeneous"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hettler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hfdf"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hgh"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hialeah"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hibbler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hicksville"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hideaki"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hidebound"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hideo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hideout"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hideouts"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hierarchy"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hiers"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hilde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hildegarde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hildegardes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hileman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hilemon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hilgeman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hille"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hilliard"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hilmes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("himalayan"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("himalayas"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hinchcliffe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hinchliffe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hinde"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hindes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hindrances"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hinduism"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hineman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hinges"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hintze"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hinze"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hippe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hippler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hirai"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hirayama"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hire"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hired"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hires"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hiroaki"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hirose"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hiroyuki"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hisao"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("histrionic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("histrionics"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hitches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hitzeman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("HIV"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hjelm"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hjort"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hoarded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hoarseness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hoaxes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hobbled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hobbyist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hobbyists"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hochstedler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hochstetler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hodde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hodgepodge"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hodges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hoefler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hoefling"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hoehne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hoelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hoene"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hoeveler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hoey"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hogue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("holcombe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("holde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("holdeman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("holdren"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("holeman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("holle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("holleman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("holme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("holmes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("holste"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("holte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("holyoak"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("holyoke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homebuilder"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homebuilders"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homebuilding"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homebuyers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homecare"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homeclub"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homecoming"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homegrown"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homeland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homelands"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homelessness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homelike"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homemade"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homemaker"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homemakers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homemaking"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("homeostasis"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("homeostatic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homeporting"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homesick"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homesickness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homesley"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homespun"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homestake"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homestate"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homestead"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homesteaded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homestretch"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hometown"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homeward"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homewood"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("homework"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("homeworkers"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("homme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hommes"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("homogeneity"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("honea"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("honse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hoobler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hoosier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hoosiers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hopefuls"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hopelessness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hopewell"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hopke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hoppe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hoppes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("horace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("horatio"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("horatius"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("horde"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hordes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("horehound"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hornblende"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("horne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("horseback"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("horseflesh"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("horsehead"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("horseman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("horsemanship"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("horsemen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("horseplay"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("horsepower"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("horseradish"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("horseshoe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("horseshoes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("horsetails"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hosea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hoses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hosler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hospice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hospices"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hosseini"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hostage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hostages"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hostetler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hostutler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hotelier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hoteliers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hottelet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hotwired"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hotze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("houdaille"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hounded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hour"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hourglass"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hours"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("houseboat"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("housebroken"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("housecleaning"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("household"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("householder"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("householders"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("households"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("housekeeper"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("housekeepers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("housekeeping"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("houseknecht"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("houseman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("houses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("houseware"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("housewares"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("housewife"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("housewives"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("housework"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("houseworth"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("housewright"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("houy"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hovde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hovering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("howse"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("howze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hoyos"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hrawi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hrdlicka"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hrncir"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hrubik"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hsiao"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hsieh"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hua"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("huachuca"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("huallaga"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("huan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("huaneng"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("huang"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("huard"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hucke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("huddled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hudler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("huetta"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("huette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("huey"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("huffstetler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("huffstutler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hufstedler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hufstetler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hugely"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hugette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("huggler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hughette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hui"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("huibregtse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("huish"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hulette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hulme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hulse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("humbled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("humblest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("humfry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("huml"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("humphries"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hunches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hundred"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hungering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hunke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("hunte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("huntsville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("huot"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hurdler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hurdling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hurteau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("huseman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hustler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hustlers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hustling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hutcheon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("huyett"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hyacinth"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hyacintha"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("hyacinthia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hyacinthie"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hyacinths"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hyades"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("hyaluronic"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hyams"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hyannis"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hyatt"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("hydroelectric"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hydropower"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hyena"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hyenas"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hygeia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hyperbole"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("hyperborean"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hyperion"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hypotheses"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("hypothetically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("hyraxes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("hysterically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("hyun"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("iafrate"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("iain"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("iannaccone"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("iannacone"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ianniello"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("iannone"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("iavarone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ibn"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("iceberg"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("icebergs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("icebox"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("icebreaker"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("icebreakers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("iceland"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("icelandair"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("icelandic"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ices"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("iceskating"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ickes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("iconoclasm"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("idalia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("idea"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("idealistic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("idealized"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ideas"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("ideological"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ideologies"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ideologist"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ideologists"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ideology"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ideonomy"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("idette"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("idiotically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("idled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("idler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("idling"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("idolizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ierardi"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ierne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("iezzi"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("iglesia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ignace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ignatius"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ihde"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ihrke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("iiams"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("iida"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("iie"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ijames"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ikea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ileana"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("iliescu"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("illes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ilse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("Ilyich"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("image"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("imageries"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("imagery"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("images"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("imbalances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("imbedded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("imbroglio"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("imm"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("immense"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("immensely"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("immortalizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("immunetech"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("immunizes"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("impartiality"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("impasse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("impeached"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("impeding"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("imperiale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("impetuous"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("imposes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("impounded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("impoverish"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("impoverished"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("impoverishes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("impoverishment"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("improvement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("improvements"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("impulse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("imrie"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("inalienable"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("inbred"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("incense"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("incestuous"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("inches"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("incidences"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("incipient"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("inconspicuous"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("inconvenienced"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("inconveniences"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("incoordination"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("incorvaia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("increases"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("indecisiveness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("indexes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("indianians"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("indices"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("indifferent"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("indonesian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("indosuez"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("induce"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("induced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("inducement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("inducements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("induces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("indulged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("indulgences"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("indulges"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("industriale"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ineffectiveness"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("inequity"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ines"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("inexperience"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("inexperienced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("infectious"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("inferences"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("influence"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("influenced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("influences"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("influencing"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("influential"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("influenza"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("infrared"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("infringed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("infringement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("infringements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("infringes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("infuses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ingenious"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ingeniously"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("inglish"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ingratiate"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ingratiating"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("initiate"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("initiated"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("initiates"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("initiating"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("initiation"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("initiator"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("initiators"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("injustice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("injustices"));
            $this->assertEquals(7, $this->TextStatistics->syllable_count("inmobiliaria"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("innerspace"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("innuendo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("innuendoes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("innuendos"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("inouye"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("inquired"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("inquires"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("inquiries"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("inquiring"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("inscore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("inspired"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("instances"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("institucional"));
            $this->assertEquals(7, $this->TextStatistics->syllable_count("institutionalizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("insurances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("intaglio"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("intelligentsia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("intended"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("intense"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("intensely"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("interacciones"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("interbred"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("interceding"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("interchanges"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("intercollegiate"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("interdictes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("interest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("interested"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("interesting"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("interests"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("interface"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("interfaces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("interlaced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("intermingled"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("intermingling"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("internationale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("interoffice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("intervoice"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("intraocular"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("intrauterine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("intrigue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("intrigued"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("intrigues"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("intriguing"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("intriguingly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("introduce"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("introduced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("introduces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("intuit"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("intuition"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("intuitive"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("intuitively"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("invaluable"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("inveighed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("inventiveness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("invoice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("invoices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("involve"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("involvement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("involves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("iodice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("iole"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("iona"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ionic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ionics"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ionization"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ionizers"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ionizing"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ionospheric"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ions"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("iorio"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("iou"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("iovine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("irette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("irises"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ironically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ironizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ironton"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("iroquois"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("irvette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("isabelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("isadore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("isaiah"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("isautier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("iseman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("isle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("isles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("isms"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("isocyanate"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("isoelectronic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("isosceles"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("Isozaki"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("israel"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("issuances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("italian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("italianate"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("italians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("itches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("itll"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ixion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("izquierdo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("izvestia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jacinthe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jacksonville"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("jacobean"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jacque"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jacques"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jacquie"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jaenicke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jahnke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jaime"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jaimes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jakeway"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jameson"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jamestown"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jamesway"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jandreau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("janelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("janesville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("janette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("janeway"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jangled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("janice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("janicke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("janke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jaques"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jared"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jarreau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jasmer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jaundice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jaundiced"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jaya"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("jayashankar"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jayme"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jaymes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jeanbaptiste"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jeanette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jeanne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jeannette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jeansonne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jeers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jefferies"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jenne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jennette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jenrette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("jeopardizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jerboas"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jerde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jere"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("jeroboam"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jerrome"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jeschke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jeske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jesmer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jesuit"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jesuits"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jetborne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jewkes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("jeyaretnam"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jiang"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jiangsu"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jiawen"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("jingoism"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("jingoistic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("joachim"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("joachims"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("joann"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("joanna"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jocelin"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("joceline"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jocelyn"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jocelyne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jocylan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("joedicke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("joel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("joey"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("joffe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("joffrion"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("joie"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jolette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jolicoeur"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("joliet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jolivette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jolliffe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jopling"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jorde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jorge"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jose"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("josette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("joshua"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("jostes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jostling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("joyal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("joycelyn"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("joyoni"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("joyous"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jr"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jua"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("juan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("juana"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("juanita"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("juarez"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("judaism"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("judea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("judeo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("judgement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("judgements"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("judges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("judgeship"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("judgeships"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("judice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("judishe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("juedes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("juenemann"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("juggled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("juhnke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("juices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jukebox"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("julia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("julianne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("juliet"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("julietta"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("julius"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("jumbled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jumonville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("juneau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("junette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("junior"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("juniors"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("jurgensmeyer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("justice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("justices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("juul"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kadrmas"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kageyama"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kahane"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kahle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kahre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kalliel"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kalthoff"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kamakau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kamerer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kamikaze"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kamler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kampe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("Kampuchea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kanade"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kanghua"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kaniewski"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kanne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kanouse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kantian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kaohsiung"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kapler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kappes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kappler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("karaoke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("karate"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kardashian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("karges"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("karnes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kartes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kaseman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kasler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kasmer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kasprzak"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kasprzyk"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kasriel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kassler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kastenmeier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kastl"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kataoka"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("katayama"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("katharine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("katia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kawai"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kawate"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kaya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kayak"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kayaking"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kayaks"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kayo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kazuo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("keay"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("keebler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("keeffe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kehne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kehres"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("keiichi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("keio"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("keisler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("keisling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("keister"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("keisuke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("keleman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kelemen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kemerer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kempe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kempke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kenealy"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kennebeck"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kennemore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kensler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("keo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("keogh"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("keohane"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("keown"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("keplinger"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("keppler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kerestes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kerien"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kernes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("Kerouac"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kerpedjiev"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kerrville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("keske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kesler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kesling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kessler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("keville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("keynesian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kganakga"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kgori"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("Khaled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kibbe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kibodeaux"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kidde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kidded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kiehne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kiessling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kiev"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kigale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kightlinger"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kilborne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kilbourne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kille"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("killian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("killilea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kimbler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kimbriel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kimche"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kimler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kindled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kindler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kindred"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kingry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kingsville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kinne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kinsler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kinzlmaier"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kiplinger"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kippes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kirouac"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kisler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kisling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kissler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kissling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kitchenette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kiyoshi"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kiyotaka"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kjar"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kjos"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("klabunde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("klages"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kleer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kleindienst"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kleinpaste"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("klemme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("klenke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kleppe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kliethermes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("klingler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("klinke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("klitzke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("klocke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kmart"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kmetz"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kmiec"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kmiecik"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("knapke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kneer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("knicely"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("knievel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("knifelike"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("knobbe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("knoedler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("knowledgeware"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("knowles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("knoxville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("Knute"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("koala"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kobayashi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kocian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kociemba"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("koegler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("koehne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("koelle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("koepke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("koeppe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("koestler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("koetje"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kofler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kogler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kohne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kohnke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("koichi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kokate"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kolbe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kolle"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("kolodziejski"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("Komsomolskaya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kooy"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kooyman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kopke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("koppe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("koppes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("korea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("koreagate"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("korean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("koreans"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("koreas"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("korfhage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("korte"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("korzeniewski"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kosanke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kostrzewski"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("koteles"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kothe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kotler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kottler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kouri"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kowalke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("koyama"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("koyo"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("krabbe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kracke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kraeutler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("krajina"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kramme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("krammes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("krampe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("krasnoyarsk"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kratzke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("krauer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("krausse"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kreher"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kreidler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kreisher"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("krenke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kresge"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kresse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kressler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("krienke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kriete"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("krinke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kristoffe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kroening"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kroenke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("krone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kruckeberg"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("krumme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kruschke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ksiazek"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kuala"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kuan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kuchler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kudrna"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kuechler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kuehne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kuenheim"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kuenstler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kuenzi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kugler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kuhne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kuhnke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kumagai"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kunayev"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kunde"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kuntze"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kunze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kuo"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("kuske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kusler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kuzniar"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kvale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kvam"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kvasnicka"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("kvetch"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kveton"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("kvistad"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("kvitsinsky"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("kwh"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("labbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("labeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("labelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("labine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("labonte"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("laboratories"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("laboratory"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("laborde"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("labossiere"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("labouisse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("labranche"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("labrecque"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("labrie"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lacayo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lacaze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lacefield"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("laces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lacewell"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lachapelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lacoste"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("lacoursiere"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lacquer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lacrosse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ladled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("laduke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lafalce"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("laferriere"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("laffitte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lafitte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("laflamme"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lafler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lafollette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("laforte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lafosse"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("lafreniere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lagace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lagesse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lagrone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lague"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lahaie"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("laimbeer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("laity"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lajeunesse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lajoie"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lakefield"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lakefront"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lakeland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lakeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lakeshore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lakeside"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lakeview"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lakewood"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lalone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lamaist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lamarche"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lambaste"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lambastes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lambe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("lambiase"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lamere"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lamme"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lamontagne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lamonte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lamoreaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lamothe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lamotte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lamoureaux"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lampe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lampl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lancelet"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("lanceolate"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lancia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lande"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("landed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("landes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("landfried"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("landreneau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lanehart"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lanese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("langelier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("langhorne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("langone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("language"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("languages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lanier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lanouette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lanphier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lansdowne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("laos"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("laotian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lapage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lapine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lapointe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("laporte"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lappe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("laprade"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lapse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("laraia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("larche"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("larded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lareau"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("lareina"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("largesse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lariccia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("larine"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("lariviere"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("larke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("larochelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("larocque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("laroque"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("larose"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("larrea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("larroquette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("laryngeal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lasalle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lashua"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("laske"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lasseigne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lastrapes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("latches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("latendresse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lateness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("latexes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lathe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lathes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("latourette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lattice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("latticework"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("launches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("laureate"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("laureates"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("laurentiis"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("laurette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("laurice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lausanne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lavelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("laverdiere"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("laverdure"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lavere"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lavergne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("laverne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lavette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lavigne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lavine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lavinia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("laviolette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lavoie"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lawhorne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lawrenceburg"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lawrenceville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lawshe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lawyer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lawyerly"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lawyers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("layborne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("layered"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("layering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("layoff"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("layoffs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("layout"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("layouts"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("layover"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("layovers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lazare"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lcs"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ldbrinkman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leaches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leadville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("league"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leaguer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leaguers"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("leagues"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leah"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leakage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leander"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leandro"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leann"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leapfrogged"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leaseback"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leasebacks"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leasehold"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leases"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leaseway"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leatrice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leavelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lebeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lebegue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leboeuf"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lebouef"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leccese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lecompte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lecomte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lecrone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ledges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ledonne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leeches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leeuwen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leffler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("legare"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("legette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("legged"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leggette"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("legitimizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("legrande"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lehne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lehrke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leibfried"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leibler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leicester"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leifeste"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leino"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leist"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("leitzke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lelia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lembcke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lembke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lemcke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lemelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lemieux"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lemire"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lempke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lendl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lenient"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lenke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lentine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leoma"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("leominster"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leona"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("leonardo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leonel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leonelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leonerd"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leones"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leonhard"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leoni"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leonid"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("leonora"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leonore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leontine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leopold"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("leopoldine"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("leopoldo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leos"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leotard"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lepage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lepere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lepine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lepore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lequire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lereah"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lerette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lesage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lesane"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lesesne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("leske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lespinasse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("letarte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leticia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("letitia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("letourneau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lettice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lettiere"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lettuce"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leveille"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leveque"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leverage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leveraged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leveraging"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("leverette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("levering"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("leverone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("levesque"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("levien"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("levitte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("leya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lezotte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lhommedieu"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("liaison"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("liaisons"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lian"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("liang"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lianne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("liao"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("liasson"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("liberace"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("liberalization"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("liberatore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("libya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("libyan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("libyans"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("licciardi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("licea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("licences"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("license"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("licentious"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lichte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("licorice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("liebler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lieu"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lieurance"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("Lieut"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lieutenant"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lieutenants"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifeblood"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifeboat"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifeboats"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifeco"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifeguard"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifelike"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifeline"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifelines"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifelong"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lifesaver"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lifesavers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lifesaving"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifespan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifestyle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifestyles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifetime"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lifetimes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("liffe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lighthouses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("likelier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("likeliest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("likelihood"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("likeness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("likenesses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("likewise"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lilienthal"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lille"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lilyan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("limehouse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("limelight"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("limestone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("limestones"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("limoges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("linage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("linde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lindeman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lineage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("lineages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lineal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("linear"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("linearly"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lineback"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("linebacker"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("linebackers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lineberger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lineberry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lineman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("linemen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("linette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lineweaver"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lingering"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("linguistically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("linkage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("linkages"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("linke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("linne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("linnea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("linneman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("linnemann"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("linoleum"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("linse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("linville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lion"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("lionberger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lionel"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("lionetti"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lionheart"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lionized"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lions"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lipke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lippe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("liqueur"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("liqueurs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lire"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lirette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lisette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("liske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("litalien"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("literaturnaya"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lithe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("litigious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("littlepage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("littlest"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("liu"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("livelier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("liveliest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("livelihood"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("liveliness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("liveried"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("livestock"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("livonia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lizotte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("llorens"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("loaiza"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("loathe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("loathed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lobbyist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lobbyists"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("locke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lockyer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lodestar"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lodestone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lodgepole"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lodges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loeffler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("loella"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loess"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loew"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loewe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("loewen"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("loewenstein"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("loewenthal"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("logarithm"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("logarithms"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("logically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("logician"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("logistically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("logiudice"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("logue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("loguidice"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lohnes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lohse"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("loiacano"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("loiacono"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lois"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loise"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loiselle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("loneliness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lonesome"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lonetree"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("longenecker"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("longshoremen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("looses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loosestrife"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loosestrifes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lopeman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lorean"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lorette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lorne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("losoya"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lotte"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lottes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lotze"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("louanna"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("louart"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("louisette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("louisville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lounges"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("louque"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lourdes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("louviere"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lovage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loveday"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lovegrove"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lovejoy"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loveland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loveridge"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lovering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lovette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lovewell"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lowekamp"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lowering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loyal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("loyalist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("loyalists"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("loyall"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("loyally"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("loyalties"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("loyalty"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("loyola"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lozeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lozenges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lozoya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lp"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lpn"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ls"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lsd"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ltd"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lua"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lubke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lucchese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lucerne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lucette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lucia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lucian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("luciani"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lucianna"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lucien"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lucille"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lucke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("luckiest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lucrecia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ludeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ludemann"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("luebbe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("luebke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lueck"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("luecke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("luedecke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("luella"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("luelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("luera"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("luevano"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("luggage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lui"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("luigi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("luis"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("luisa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lukehart"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lukewarm"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("luncheonette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lunches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lunde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lunges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("luoma"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("luong"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("luongo"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("luque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("luquette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lurches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lurette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lutze"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lutzke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("luu"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lyall"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lyell"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lyerla"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lynde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lynette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lynne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lyon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lyondell"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lyonnais"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lyonnaise"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("lyons"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("lyphomed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("lysne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mabelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mabry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("macaques"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("maccabean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("macdiarmid"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("macfadyen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("machete"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("machetes"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("machiavellian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("machinea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("maciag"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maciejewski"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("macioce"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("macke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mackiewicz"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("macmahon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("macqueen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("macrame"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("macroeconomic"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("macroeconomics"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("macrophage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("macrophages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("macwilliams"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("madelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mademoiselle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("madl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("madlen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("madore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maeda"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("maekawa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maenza"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maestri"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("maez"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maffeo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("magician"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("magicians"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("maglione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("magnolia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("magnolias"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("magnone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("magouirk"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mahayana"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mahe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("maher"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mahnke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("maia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mailboxes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("maille"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mainichi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mainville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("maio"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maiolo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maione"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("maiorana"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("maiorano"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("maiorino"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("maish"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("majette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("majure"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("makegoods"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("makeover"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("makepeace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("makeshift"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("malave"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("malayan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("malaysian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("malaysians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("maleness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("malice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("malinde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maline"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("malkiel"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("malle"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("malleability"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("malleable"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mallette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("malpractice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("malveaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("manage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("managed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("management"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("managements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("manages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mandeville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mandl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("manette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("maneuvering"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("maneuverings"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("manfred"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("manganiello"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mangement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("manges"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("mangiaracina"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mangine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mangione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mangled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mangling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mangone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mangope"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("manhandled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("manke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("manne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mannerisms"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mannes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("manrique"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("manseau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("manske"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("manthe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mantione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mantua"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("manuevering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("manville"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("manzanares"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("manzione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maoris"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mapplethorpe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("maraline"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marantette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maranville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marceau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marceaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marcelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("marcelline"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marchese"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("marchione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marcia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marcial"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marciante"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marcille"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marcone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marcoses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marcotte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("margeotes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("margette"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("marginalizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("margiotta"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marianne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mariel"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("marielitos"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mariette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("marijuana"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marineau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marineland"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marion"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("marje"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("marke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("markedly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marketplace"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("marketplaces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marlette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marmion"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marotte"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("marque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marquee"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marquees"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("marques"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marquette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marriages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marrone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("marschke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marseille"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("marte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("martelle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("marthe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("martineau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("martinique"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("martire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("martone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marui"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("maruyama"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maruyu"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marvelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maryann"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("marysville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maryville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("marzette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("masaaki"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("masai"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("masao"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("masaya"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("masayoshi"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("masayuki"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("maschke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mascia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("masciarelli"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mascioli"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("masefield"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("masiello"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("maske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maslen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("massacred"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("massacring"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("massage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("massaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("massages"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("masse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("massicotte"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("massingale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mastandrea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("masterminded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("masterpiece"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("masterpieces"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("mastrogiovanni"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mastroianni"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("matarese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mataya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("matches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mateo"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("materializes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("materiel"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mathai"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mathe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mathea"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("mathematician"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("mathematicians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("matherne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mathieu"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mathilde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("matisse"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("matrilineal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("matsui"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("matsuo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("matsuoka"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("matsuura"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("matte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("matteo"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mattes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("matthea"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("matthes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mattice"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("matzke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("maurice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mauriello"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maurine"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mausoleum"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mauthe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mawr"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("maximizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maxion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("maxzide"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("maya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mayall"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mayan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("maybe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("maybelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mayeda"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mayernik"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mayerson"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mayeux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mayo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mayon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mayonnaise"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mayor"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mayoral"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mayoralty"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mayorga"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mayors"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mayville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mazes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("mazowiecki"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mazzei"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mazzeo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mazzone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mbank"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mcalinden"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mcauliffe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mcbrien"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mcbryar"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mccaffery"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mccague"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mccahan"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("mccarthyism"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mccarville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mccaughan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mccluer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mcconville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mccuin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mcdiarmid"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mcfadyen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mcgeough"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mcginnes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mcgoey"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mchargue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mckeague"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mckeon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mckeone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mckeown"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mcmillian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mcmurtrie"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mcneece"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mcneer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mcneice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mcquaid"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mcquaide"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mcquaig"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mcquain"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mcqueary"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mcqueen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mcqueeney"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mctague"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mcteer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mctigue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mcwilliam"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mcwilliams"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("meagher"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meander"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meandered"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("meandering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meanders"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("measurement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("measurements"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("meaux"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mechanically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mechanisms"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("meckes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("medea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("medically"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("mediterranean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("medlen"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("meetze"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("megacarriers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("megace"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("megahouses"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("megalomaniacal"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mehitabelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("meidl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("meierfeld"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("meincke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("meindl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("meinecke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("meinke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meiosis"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meisler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("meiyuh"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("melamed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("melanesian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("melbourne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("melded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("melisse"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("melle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meloche"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("melone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("melville"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("memorabilia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("menace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("menaced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("menaces"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("menapace"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("menasion"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mende"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meneses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("menezes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("Mengele"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("menges"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("menke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("menkes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("menne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("menstruation"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mente"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("menze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("meo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meola"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("meow"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mercedes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mercedeses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mercure"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("merdyce"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("merges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("merhige"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("meridionale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("merion"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("merle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mersereau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mertice"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("meschke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("meserole"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("meske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mesler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mesozoic"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("message"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("messagepad"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("messages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("messiaen"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("messineo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("messler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("messrs"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("metabolisms"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("metcalfe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meteor"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("meteoric"));
            $this->assertEquals(7, $this->TextStatistics->syllable_count("meteorological"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("meteorologist"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("meteorologists"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("meteorology"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("methodisms"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("metier"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mettler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("metze"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meyerhoff"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meyering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meyerman"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("meyerowitz"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meyerson"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("meyo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("meyohas"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mfume"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("micale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("micciche"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("micheaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("michelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("michener"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("michl"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("micke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("microage"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("microamerica"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("microcosm"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("microeconomic"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("microeconomics"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("microelectronic"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("microelectronics"));
            $this->assertEquals(7, $this->TextStatistics->syllable_count("microelettronica"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("micrografx"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("micromanage"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("micromanagement"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("microorganism"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("microorganisms"));
            $this->assertEquals(8, $this->TextStatistics->syllable_count("micropaleontology"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("microscopically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("midges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("midgette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("midpriced"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("midyette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("miert"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("miesse"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("migliore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("migneault"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mignone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mijares"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("milbourne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mildred"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mildrid"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mileage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("milestone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("milestones"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("milieu"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("milke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("millage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mille"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("millette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("milliet"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("milne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("milnes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mimeograph"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("minamide"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("minasian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("minassian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mincemeat"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("minded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mindedly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("minea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mineau"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("minebea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("minefield"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("minehart"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mineo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mineola"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("minesweeper"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("minesweepers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("minette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mineworkers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("minges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mingled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mingling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("miniard"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miniaturized"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("minibuses"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("minichiello"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("minimizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("minjares"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("minke"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("minneapolis"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("minoan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("minogue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mintage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("minteer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("minuet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("minuses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("minuteman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mion"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mirabelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mirage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mireles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mirelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("misbehavior"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miscarriages"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miscayuna"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mischarged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mischarges"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mischke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mischler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("miscreant"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("miscreants"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miscreations"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("misfire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mishandled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("misjudged"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("miske"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("misled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mismanaged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mismanagement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mismatched"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mismatches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("misplace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("misplaced"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mispriced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("missildine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("missler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("misstatement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("misstatements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("misuses"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mitschke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mitsui"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mittler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mixes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mixte"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miyagawa"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miyahara"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("miyake"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("miyako"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miyamori"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miyamoto"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miyasaki"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miyasato"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miyashiro"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miyazaki"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("miyazawa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mizelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mkhatshwa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moab"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("moammar"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moates"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mobiliare"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moccia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("modestine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("modisette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("moening"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("moerbe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("moerke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("moerman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mohamed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mohammed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mojave"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("molded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("molehill"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("molelike"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("molesworth"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("molineaux"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("molle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("molyneaux"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("momayez"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("moncayo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("monceaux"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("moncure"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("monde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mondeo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("monette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mongeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mongering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mongooses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("monisms"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("monje"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("monologue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("monologues"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("mononuclear"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("monopolizes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("monotheism"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("monroeville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("monsieur"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("monsieurs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("montage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("montagne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("montagnier"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("montefiore"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("monteleone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("montemayor"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("montesdeoca"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("montevideo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("montgomery"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("montiel"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("montien"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("montieth"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("montone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("montoya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("montreal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("montville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moorehead"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moorehouse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moorestown"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moosehead"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("moppes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("morace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moragne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("morea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moreau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("morehead"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("morehouse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moreland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moreman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mores"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("morever"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("morgue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("morice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("morine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("morisette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("morissette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("moriya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("morneau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("morneault"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("morones"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("morreale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("morrisette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("morriss"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("morrissette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("morrisville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("morrone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mortage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mortages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mortgage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mortgaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mortgagepower"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mortgages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mortician"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("morze"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mosaic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mosaical"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mosaics"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moseley"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moselle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moseman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mosier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mosler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mosque"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mosques"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mothershed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("motl"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("motorcyclist"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("motorcyclists"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("motte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mousehole"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mousetrap"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mousse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mousseau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mouthed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mouthpiece"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mouthpieces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("movement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("movements"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("moya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mozambique"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mozartean"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mozelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mpeg"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mpg"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mph"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mr"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mrs"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("msgr"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mssrs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mtel"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("Muammar"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("muddled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("muecke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("muehlebach"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("muffled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("muffler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mufflers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mugabe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mughniyeh"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mugniyah"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("muhamed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("muhammed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mui"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mukai"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mulches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mullineaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mulqueen"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("multiemployer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("multilayered"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("multivalve"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("multiyear"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mulvehill"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mumbled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("mumme"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mungia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("munguia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("muraoka"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("muratore"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("murayama"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("murguia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("muriel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("murrelet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("murrieta"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("muscled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("muscling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("muses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("museum"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("museums"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("musically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("musician"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("musicians"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("muske"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mustached"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("mustaches"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("mustachioed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("muzzled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("myatt"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("myelin"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("myhre"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("myocardial"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("myocardium"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("myopia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("myopic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("myosin"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("myotrophin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("myreon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("myrtice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("mystique"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("NAACP"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nacional"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nacke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nacogdoches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nadal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nadeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nadler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nagai"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nagao"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nagoya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("naim"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nairne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("naish"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("naive"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("naively"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("naivete"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nakai"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nakao"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nakasone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nakayama"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("naked"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nameplate"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nameplates"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("namesake"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nanette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nantes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("naoma"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("naomi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("napea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("naperville"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("napoleon"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("napoleonic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("narayan"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("narayanan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("narcisse"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nardiello"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nardone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("narvaez"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nashua"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nashville"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nasional"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nasr"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("natale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("natalia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nathe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nationale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nationales"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("natzke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nausea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nauseated"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nauseating"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nauta"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("navarette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("navarrette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("navellier"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("Nazarbayev"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("nazionale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("neanderthal"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("neanderthals"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("neapolitan"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("neault"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nechayev"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("necklace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("necklaces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nedeau"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nederlandsche"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nedlloyd"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("needled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("needler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("neer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("negotiate"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("negotiated"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("negotiates"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("negotiating"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("negotiation"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("negotiations"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("negotiator"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("negotiators"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("neidl"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("neidlinger"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("neises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("neisler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("neitzke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nelle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nelles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nellette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nemean"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("neo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("neoax"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("neoclassic"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("neoclassical"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("neoconservative"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("neoconservatives"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("neola"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("neoliberal"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("neoliberals"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("neoma"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("neon"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("neonatal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("neons"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("neophyte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("neophytes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("neoplasm"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("neoplatonic"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("neoplatonist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("neoprene"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("neoprobe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("neorx"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("neotenic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("neoteny"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nepl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nerice"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nerves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nesler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nessler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("neste"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nestea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nestler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("netterville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("neuendorffer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("neuroscience"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("neuroses"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("neutralizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("neuville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("neveau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("neville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("newcombe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("newfangled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("newgateway"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("newlywed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("newtowne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("newville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ngema"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nguyen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("niagara"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("niaid"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("niall"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nibbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nibbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nicely"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("niceness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("niches"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("nickelodeon"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("niclaneshia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nicolai"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nicolette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nicoline"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nicolle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nicorette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nicosia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nieces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nienhuis"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nietzsche"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nieves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nightstage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("NIH"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("niihau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nike"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nilges"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nilles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ninefold"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nineteen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nineteenth"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nineties"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ninette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ninety"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ninneman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("niquette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nishiyama"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("nitrosamines"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nitschke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nixes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("njt"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("noa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("noah"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nobbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("noblesse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nobuo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nobuyuki"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nodded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nodine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("noel"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("noffke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nogales"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nogueira"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("noire"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("noises"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nolde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nolette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nolte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nonbusiness"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("noncontroversial"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("noncorporate"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nondefense"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nonesuch"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nonetheless"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("noninterest"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nonlinear"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nonmanagement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nonnuclear"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nonreligious"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nonsense"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("norcia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nordine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nordling"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("noriega"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("noriegas"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("norsemen"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("norte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("norville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("norwegian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("norwegians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nosebleed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nosedive"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nosedived"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("noses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("noseworthy"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nostalgia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("notches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("notebook"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("notebooks"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("noteholders"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("notestine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("noteware"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("noteworthy"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("notice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("noticed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("notices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nottage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("notte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nouveau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nouvelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nov"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("novice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("novices"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("novoa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("noxema"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("noxious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("noyola"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nuanced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nuances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nuclear"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nucleation"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nuclei"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nucleic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nucleonics"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("nucleotide"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nucleus"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nudges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nuisances"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("numed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("numerically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nunemaker"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nunsense"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nureyev"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nurre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nusbaum"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nutrient"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nutrients"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nutritious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nvhomes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nvryan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("nyack"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nyenhuis"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("nyerere"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("nyers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oad"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oahu"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("oakville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oases"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oasis"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("obeirne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("obermaier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("oblige"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("obliged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("obliges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("oblique"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("obliquely"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("oblivion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("obnoxious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oboist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("obrien"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("obryan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("obryant"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("obscenely"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("observances"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("observed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("observes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("obstetrician"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("obstetricians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("obyrne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ocain"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("occhoa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("occupiers"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("occurrences"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("oceanic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ochoa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oct"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("oddler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("odea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("odele"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("odelette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("odeon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("odette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("odp"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("odysseus"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("oehlke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("oehme"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oeien"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("oelke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("oest"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("oesterreichische"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("oeuvre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ofc"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("offended"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("offense"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("office"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("officeholder"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("officeholders"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("officemax"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("offices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("offstage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ogled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oglethorpe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ognibene"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oguin"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ohanesian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("OHara"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ohare"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ohbayashi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ohlmeyer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("oie"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oishi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ok"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("okabe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("okane"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("okayed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("okeeffe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oken"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("okoniewski"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("olague"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("olayan"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("olde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("olea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("oleander"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("oleaster"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oleo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("oligarchs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("olinde"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("olivares"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("olivette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("omelet"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("omelets"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("omnibuses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oncale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("oncogenes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("onecomm"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("oneness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oneok"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("oneself"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("onetime"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("onstage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("oooh"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ooohs"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ooten"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("oozes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("opaque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("opera"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("operas"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ophelia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("oplinger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("opposes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("optically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("opticians"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("orabelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("orangeburg"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oranges"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ordinances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("orea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oreffice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("orefice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oreo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("organelles"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("organically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("organisms"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("organizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("orgasm"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("orgasms"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("orient"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("oriental"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("orientals"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("orientation"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("oriented"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("orifices"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("orion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oriordan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("orleans"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("orme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ormes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ormonde"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("orne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("orourke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("orphanage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("orphanages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("orpheum"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("orpheus"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("orthodontia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("orville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("osage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("osages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("osake"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("osborne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("osbourne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("osceola"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oshea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("osmer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("osred"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ostentatious"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("ostentatiously"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("osteoarthritis"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("osteopathic"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("osteoporosis"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("osterreichische"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ostia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ostling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ostriches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("otte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ouelette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ouellette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ouimet"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ouimette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ounces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("our"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ourada"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ours"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ourself"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("outage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("outages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("outhouses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("outler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("outpace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("outpaced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("outpaces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("outplacement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("outrage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("outraged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("outrageous"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("outrageously"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("outrages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("outstretched"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("outweighed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ovalle"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("overambitious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("Overbye"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("overcharged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("overcharges"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("overcrowded"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("overdoses"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("overextended"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("overfunded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("overmatched"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("overpriced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("overproduce"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("overproduced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("overreached"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("overreaches"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("overreact"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("overreacted"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("overreacting"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("overreaction"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("overseer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("overseers"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("oversizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("overstatement"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("overstatements"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("oviedo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oyama"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("oyen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("oyola"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ozanne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ozelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("paccione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pacemaker"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pacemakers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("paces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pacesetter"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("paceway"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("package"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("packaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("packages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("padded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("paddled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("padua"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("paez"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pagemaker"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pagette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pai"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("paille"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("painewebber"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("paiute"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("palace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("palaces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("palauans"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("paleobotany"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paleocene"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("paleontology"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("paleozoic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("palese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("palette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pallone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("palme"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("palmieri"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("palmstierna"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("palomares"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("panacea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pancreas"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pancreatic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("paniccia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pannone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pantaleo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("panthea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pantheistic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pantheon"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("panzhihua"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paolella"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paoletti"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paolillo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paolini"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paolino"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paolucci"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("paone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paonessa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("papale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("papaleo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("papandrea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("papaya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("papayas"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("papering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("papier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("papineau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("papke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("papua"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("paque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("paquette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paradoxes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("paradoxically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paraguayan"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paralyzes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paranoia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paranoiac"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("paraphernalia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paratore"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("parazoa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("parcplace"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("parde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("paredes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("parentage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("parenteau"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("parentheses"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("parimutuel"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pariseau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("parisian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("parizeau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("parke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("parkes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("parlette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("parliament"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("parliamentary"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("parliaments"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("parmele"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("parnes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("paroxysm"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("parsonage"));
            $this->assertEquals(7, $this->TextStatistics->syllable_count("partecipazioni"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("partiality"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("partridges"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("parziale"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("paschke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pascua"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("paseo"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("paske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pasquale"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("pasquariello"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pasque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("passage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("passages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("passageway"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("passaic"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("paste"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pastes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pastiches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("patches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pathe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("patnaude"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("patrice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("patricia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("patrician"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("patricians"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("patrie"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("patrilineal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("patronage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("patrone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("patzke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("paulette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pauses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pautler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pavement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pavements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pavese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("payable"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("payables"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("payan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("payeur"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("payoff"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("payoffs"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("payola"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("payout"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("payouts"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peaceful"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("peacefully"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("peacefulness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("peacekeeper"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("peacekeepers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("peacekeeping"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("peacemaker"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("peacemakers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("peacemaking"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peacetime"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peaches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pearle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pebereau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pecore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("peculiar"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("peculiarly"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peddled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peddler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peddlers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pedone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peebler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("peer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peerage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peerless"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("peers"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("peinado"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("peladeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pelaez"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pelagia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pelayo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pele"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pelletier"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("peloponnesian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("penalizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("penelope"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pennsylvania"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pense"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("penthea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("peonies"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peons"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("peony"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peopled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("peoria"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pepe"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("pepenadores"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peppler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("peragine"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("peraino"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("perales"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("percentage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("percentages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("perches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("perea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("peres"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("performances"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pergande"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("perine"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("perle"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("permeability"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("permeate"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("permeated"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("permeates"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("permissiveness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pernice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("perniciaro"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("perplexes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("perreault"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("perricone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("perriello"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("perrine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("perrone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("perseus"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("persian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("persians"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("persuadable"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("persuade"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("persuaded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("persuades"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("persuading"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("persuasion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("persuasions"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("persuasive"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("persuasively"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("persuasiveness"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pervasiveness"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pescatore"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("peschke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("petrea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("petroleos"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("petroleum"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("petrone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("petrossian"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("petrovietnam"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("petteway"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pettine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pevehouse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pfiester"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ph"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("phalanges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("phantasm"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pharaonic"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("pharisaism"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("phaseout"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("phases"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("phebe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("phileo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("philistia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("phillippe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("phineas"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("phlcorp"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("phoebe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("phoenicia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("phoenician"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("phoenicians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("phonemate"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("phonetically"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("photoelectric"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("photovoltaic"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("photovoltaics"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("phrases"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("phua"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("phuong"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("physician"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("physicians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("physique"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("phytogeography"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("picariello"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("picayune"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("piccione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("piccone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pichette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pichler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pickled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pickler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pickren"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("picotte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("picower"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("picturesque"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("picturetel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("piecemeal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pieces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("piecework"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("piedboeuf"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pierette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pierrelouis"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("piers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("piet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pieties"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pietro"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pietruski"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pietrzak"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pietrzyk"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("piette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("piety"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pignone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pigue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pilferage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pilgrimage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pilgrimages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pillage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pillaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pillages"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pille"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pilotte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pincavage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pineau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pineo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pinette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pingitore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pinneo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pinsoneault"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pioneer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pioneered"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pioneering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pioneers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("piontek"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("piontkowski"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pipefishes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pipeline"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pipelines"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pipetec"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pique"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("piqued"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("piquette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pirkl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pirouettes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pirrone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pisces"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pischke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pisciotta"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pitchblende"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pitches"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pitiable"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("pituitary"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("placement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("placements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("placencia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("places"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("placeway"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("placke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("plagiarism"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("plague"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("plagued"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("plagues"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("plaguing"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("plaia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("plainclothes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("plaisted"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("plante"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("plaque"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("plaques"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("plascencia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("plasencia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("plasse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("plateau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("plateaued"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("plateauing"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("platelets"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("platelike"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("platinum"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("platte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("playa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("playoff"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("playoffs"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pleasantville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pleases"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("plebeians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pledges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pleiad"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pleiads"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("plenmeer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("plisetskaya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("plodded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("plouffe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("plourde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("plumage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("plumages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("plunges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pluses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pm"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pneumonia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("poage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pocius"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("poel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("poem"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("poems"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("poeschl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("poet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("poetic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("poetry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("poets"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("poggioli"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pogue"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("poinsettia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("poinsettias"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pointe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("poitier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pokeweed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("polecat"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("polecats"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("poleward"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("police"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("policed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("policeman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("policemen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("polices"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("policewoman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("politeness"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("politician"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("politicians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("politte"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pollyanna"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("polyacetylene"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("polyak"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("polyamide"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("polyandrous"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("polyandry"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("polyester"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("polyesters"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("polyethylene"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("polymerizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("polynesian"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("polytheism"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("polytheistic"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("polyurethane"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pomerleau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pompeo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pomrenze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ponce"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ponsolle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ponte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pontiac"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pontiacs"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pontikes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pontious"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pooches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("popejoy"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("popieluszko"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("popolare"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("poppe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("poppea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("populace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("poquette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("porches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("porges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("porpoises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("porsche"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("porsches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("portage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("portales"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("porte"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("porterages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("portrayal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("portrayals"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("poses"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("possiblity"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("postage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("postindustrial"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("postponement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("postponements"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("postrelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pottebaum"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pouches"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("poudrier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("poultices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("poundage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pounded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pourciau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("powercise"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("powerfully"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("powerhouses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("powering"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("powerpc"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("powerpcs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("powertrain"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ppm"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("practically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("practice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("practiced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("practices"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("prague"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("praises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("praiseworthy"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pralle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prances"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pratte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prattville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("prayer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("prayers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("preaches"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("preadolescent"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("preamble"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prearranged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("preceding"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prechtl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("preciado"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("precipice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("predaceous"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("preeminence"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("preeminent"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("preempt"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("preempted"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("preemption"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("preemptive"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("preexist"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("preexisted"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("preexisting"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("preexists"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("preface"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prefaced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("preferenced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("preferences"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("preignition"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("preinvasion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("preisler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prejudged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prejudice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prejudiced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("prejudices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("premed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("premier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("premiering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("premiers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("premises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prentice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prentnieks"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("preoccupation"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("preoccupations"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("preoccupied"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("preoccupies"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("preoccupy"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("preordained"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prepackaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("preponderance"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("prerecorded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("presage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("presaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("presages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prescience"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prescient"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("presences"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("preserved"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("preserves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("presler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("presse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pressler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prestage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prestige"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("prestigiacomo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prestigious"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("presupposes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pretended"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pretense"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pretentious"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prevatte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prevette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("priceless"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prideaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pridemore"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("priest"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("priester"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("priestly"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prieta"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prieto"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("primeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("primeaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("primebank"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("primeco"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("primenews"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("primestar"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("primetime"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("primroses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("princes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("princeton"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("princeville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("principally"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("principe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("principled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prindiville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prindl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prioleau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("priore"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("prioritizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pritzl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("privette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("privileges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prizewinner"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prizewinners"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prizewinning"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prizm"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("proactive"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("probusiness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("procreate"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("procreates"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("procreation"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("procurement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("procurements"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prodded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prodigious"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("prodigiously"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("produce"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("produced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("produces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prognoses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("programme"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("proia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("proj"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("prolifically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("prolinea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prologue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prolonged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("prominences"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("promiscuous"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("promises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pronounced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pronouncement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pronouncements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("pronounces"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("propionic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("propitious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("proposes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("propounded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prosaic"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("proscia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("proskauer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("proske"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("prospectuses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prostheses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("protean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("protease"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("protege"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("proteges"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("protozoa"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("protozoan"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("protozoans"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("protuberances"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("provideniya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("provinces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("provincetown"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("provine"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("prowse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prudente"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("prudentialbache"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prudhomme"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pruitt"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pruneau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prunedale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("prurient"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("prussian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pryor"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("przybyl"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("przybyla"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("przybylski"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("przybysz"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("przywara"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pseudoscience"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("pseudoscientific"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("psyche"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("psyches"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("psychoanalysis"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("psychoanalyst"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("psychoanalytic"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("psychologically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ptolemaic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pucciarelli"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("puente"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("pugliese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("puleo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pulice"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pulse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pumice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("punches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("purchases"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("purebreds"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("purges"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("puritanisms"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("purposes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("purves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("purveyor"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("purveyors"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("puzzled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("puzzler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pyatt"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("pyeatt"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("pylant"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("qiao"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("qiaotou"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("qmax"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("quadrupled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("quadrupling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("quagmire"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("quai"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("quaid"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("quail"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("quails"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("quain"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("quaint"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("quaintance"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("quaintly"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("quamme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("quarles"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("quarre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("quassia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("quattrone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("quealy"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("queasiness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("queasy"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("queau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("quebedeaux"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("queen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("queena"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("queenan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("queener"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("queenfish"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("queenie"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("queens"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("queensberry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("queensland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("queensway"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("queer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("queerer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("quellette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("quenneville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("queue"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("queues"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("queuing"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("quiett"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("quiles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("quillian"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("quilmes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("quintupled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("quirion"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("quirke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("quivering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("quixote"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rabideau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("racamier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("racehorse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("racehorses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("races"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("racetrack"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("racetracks"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("racette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("raceway"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rachelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("racioppi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rackliffe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("radborne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("radbourne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("radcliffe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("radde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rademaker"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("radiance"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("radically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("radice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("radioed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("radler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rafael"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("raffaele"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("raffaelli"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("raffety"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rafuse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ragged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ragone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ragonese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rahe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rai"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("raia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rainier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rainville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("raises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rakestraw"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("raleses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ramage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rambeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rambled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rambler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ramblers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rambling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rambunctious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rameses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ramires"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rampage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rampaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rampages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ranches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ranges"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ranieri"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ranke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rankled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rapeseed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("raphael"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rappe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rapprochement"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("raschke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rasia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("raske"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ratcliffe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rateliff"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ratepayer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ratepayers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rathburne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rathe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rathje"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rathke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ratier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ratliffe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ratte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rattling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rauls"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ravaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ravages"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rawles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("raya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rayon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rayos"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rayovac"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("raytheon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rb"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reabsorbed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reaches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reacquire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reacquired"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("react"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reacted"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reacting"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reaction"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reactionaries"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reactionary"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reactions"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reactivate"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reactivated"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reactivating"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reactive"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reactivity"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reactor"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reactors"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reacts"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("readjust"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("readjusted"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("readjusting"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("readjustment"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("readjustments"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("readmitted"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reaffiliation"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reaffirm"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reaffirmation"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reaffirmed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reaffirming"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reaffirms"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reaganesque"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reagents"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("realign"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("realigned"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("realigning"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("realignment"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("realignments"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("realistic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("realities"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reality"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("realizable"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("realizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reallocate"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reallocated"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reallocating"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reallocation"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reallowance"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("realtor"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("realtors"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("realty"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reappear"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reappearance"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reappeared"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reappears"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reapply"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reappoint"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reappointed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reappointment"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reapportionment"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reappraisal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reappraise"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reappraised"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rearm"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("rearmament"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rearrange"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rearranged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("rearranging"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("rearrested"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reassemble"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reassembled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reassert"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reasserted"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reasserting"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reassertion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reasserts"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reassess"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reassessed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reassessing"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reassessment"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reassign"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reassigned"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reassigning"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reassignment"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reassignments"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reassume"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reassumed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reassurance"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reassurances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reassure"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reassured"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reassures"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reassuring"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reassuringly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reatta"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("reaume"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("reaux"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reawakened"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reawakening"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rebellious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rebounded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("receding"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("recharged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("recine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("recipe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("recipes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("recipient"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("recipients"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("recognizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("recommended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("recompense"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("recorded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("recore"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("recovering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("recreate"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("recreated"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("recreates"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("recreating"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("recreation"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("recreational"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("recycled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("recycling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("redactes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("redhanded"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("rediscovering"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("rediscovery"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("redlinger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("redoubled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reduce"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reduced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reduces"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reelected"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reelection"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reemerge"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reemerged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reemergence"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reemployment"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reenacted"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reenactment"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reenactments"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reenacts"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reengineering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reenter"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reentering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reentry"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reestablish"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reestablished"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reestablishing"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reevaluate"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reevaluating"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reevaluation"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reexamination"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reexamine"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reexamined"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reexamining"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reexport"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reexports"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("refenes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("referenced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("references"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("refering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("refinanced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("refinances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("refinement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("refinements"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reflagged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reflexes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("refocuses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("refuel"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("refueled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("refueling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("refuge"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("refuges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("refunded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("refusenik"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("refuseniks"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("refuses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("regalia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("regarded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("reher"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rehired"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reichart"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reichl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reichling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reignite"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reignited"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reigniting"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reimagine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reimburse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reimbursed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reimburses"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reimbursing"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reimpose"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reimposed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reimposing"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reimposition"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reina"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reincarnated"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reincarnation"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("reincke"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reincorporate"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reincorporating"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reincorporation"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reindeer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reindl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reinecke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reinforce"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reinforced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinforces"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinforcing"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("reinke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinspection"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reinstate"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinstated"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinstating"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinstitute"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reinstituted"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reinstituting"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinsurance"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reinsure"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reinsured"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinsurer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinsurers"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reintegrated"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinterpret"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reinterpretation"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reinterpreted"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reinterpreting"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reintroduce"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reintroduced"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reintroduces"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reintroducing"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reintroduction"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reinvent"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinvented"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinventing"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reinvest"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinvested"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinvesting"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reinvestment"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reinvests"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reinvigorate"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reinvigorated"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reinvigorating"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reinvigoration"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reischauer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reish"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reissue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reissued"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reissuing"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reister"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reitano"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reiterate"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reiterated"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reiterates"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reiterating"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reiteration"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("rejiggering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rejoice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rejoiced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rekindled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("relapse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("relaunched"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("relaxes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("releases"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("religione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("religious"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("religiously"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("relying"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("remanded"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("remembrances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reminded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reminisced"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reminiscences"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reminisces"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("remittances"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("remlinger"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("remme"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("remolded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("remoteness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("remoulded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rempe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("renate"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rende"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rene"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reneau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("renege"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reneged"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("renegotiate"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("renegotiated"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("renegotiating"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("renegotiation"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("renegotiations"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("renfred"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("renne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("renounced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("renschler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rensselaer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reoffer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reoffered"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reoffering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reopen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reopened"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reopening"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reopens"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reorder"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reordering"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reorganization"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reorganizations"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reorganize"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reorganized"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reorganizes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("reorganizing"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reorient"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("repackage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("repackaged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("repackages"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("repayable"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("repetitious"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("replace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("replaced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("replacement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("replacements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("replaces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reponse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reportage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reprice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("repriced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reprimanded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reproduce"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reproduced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reproduces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("repulse"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("repurchases"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("require"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("required"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("requirement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("requirements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("requires"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("requiring"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("reschke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rescinded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("researched"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("researches"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("resemblances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("resembled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("resendes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reserved"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reserves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reshuffled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("residences"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("resiliency"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("resilient"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("resistiveness"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("reske"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("resolve"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("resolves"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("resourcefulness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("resources"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("responded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("response"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("responsiveness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("resseguie"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ressler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("restaged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("restaino"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("restatement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("restatements"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("restiveness"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("restrictiveness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("resurface"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("resurfaced"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("retaliatory"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("retarded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("retemeyer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("retirements"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("retrace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("retraced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("retracement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("retrenched"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("retroactive"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("retroactively"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("retroactivity"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("retroviruses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reum"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("reunification"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reunified"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reunify"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reunion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reunions"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reunite"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reunited"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reuniting"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("reusable"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reuse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reused"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("revaluations"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reveles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("revelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("reveres"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("revette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("revises"));
            $this->assertEquals(8, $this->TextStatistics->syllable_count("revolucionario"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("revolve"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("revolves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rewarded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rewire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rewired"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("rewiring"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("reyes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("rhapsodizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rhea"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rheault"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rheaume"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("rhetorically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("rhetoricians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rhinehardt"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rhinehart"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rhineland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rhineman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rhinesmith"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rhinestone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rhinestones"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rhodanthe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rhodesian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rhythm"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rhythmically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rhythms"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rials"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ricciardelli"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ricciardi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ricciuti"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("richelieu"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("riches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ricke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ricocheted"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("ricostruzione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("riddled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rideau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rideaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rideout"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ridgecrest"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ridgefield"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ridges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ridgeway"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("riecke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("riedl"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("riedlinger"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("riendeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rietveld"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rietz"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("riffe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rifled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("righteous"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("righteously"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("righteousness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rigler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rigueur"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rijn"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rillette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rinehardt"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rinehart"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rinehimer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ringler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ringuette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rinke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rinne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rinse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rion"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("riordan"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rioux"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ripke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("riposte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ripostes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rippe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rippeon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rippled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rises"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("riske"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("risse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rissler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("riverbed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rivette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("riviello"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("riviera"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("riviere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rivieres"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("riyad"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("riyadh"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("riyals"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roaches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("roanoke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("roarke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("robare"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("robbe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("robicheaux"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("robideau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("robinette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("robitaille"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rocheleau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rochelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rochette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rocke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rockville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rocque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rodarte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rodeo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rodeos"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roderick"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rodeway"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rodine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rodrigue"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("roebke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roebling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roedl"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("roelke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("roelle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("roepke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("roeske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("roesler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("roethler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("roever"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("roffe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rogue"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rogues"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rohde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rohleder"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rohweder"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("roleplaying"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rolfe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rolfes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rolle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("romances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("romanesque"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("romaniello"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("romelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("romeo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("romesburg"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("romine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rondeau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ronne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("roque"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roquemore"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rorke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rosabelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosanne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roseanne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("roseberry"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roseboom"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("roseboro"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("roseborough"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosebrock"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosebrook"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosebrough"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosebush"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosecrans"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosekrans"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roseland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roselawn"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roseline"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roseman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rosemarie"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rosemary"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosemead"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rosemeyer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosemond"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosemont"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosenau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosettes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosevear"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roseville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosewicz"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rosewood"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roshier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rosine"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("roske"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rosse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rossiya"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ROTC"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rothe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rothmeier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rototilles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rottler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rougeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rouillard"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roukema"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rouleau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roulette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roulettes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rounded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rounsaville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rourke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rousse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rousseau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rousselle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rouyn"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("rovaniemi"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rowles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rowlette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("rowse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("roxanne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("royal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("royale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("royalist"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("royall"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("royals"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("royalties"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("royalty"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("royces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("royex"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rozelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rpm"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rua"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rudelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rudeness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rueda"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ruella"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ruffled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rugged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ruggedly"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ruhnke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ruin"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ruined"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ruining"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ruinous"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ruins"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ruis"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ruiz"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rulebook"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rulemaking"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rumage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rumbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rummage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("rumpled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("runde"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("runte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ruocco"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ruoff"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ruotolo"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ruppe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ruses"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("russe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("russellville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("russian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("russians"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rustlers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rwanda"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rwandan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rwandans"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rwandese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ryal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ryall"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ryals"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ryan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ryanair"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ryans"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ryen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ryobi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ryohei"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ryon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ryuzo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rzasa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("rzepka"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sabatine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sabotage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sabotaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("saccone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sachse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sackville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sacred"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sacrifice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sacrificed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sacrifices"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sacrilege"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sacrilegious"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("saddled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("safecard"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("safeco"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("safeguard"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("safeguarding"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("safeguards"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("safekeeping"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("safety"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("safeway"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("safier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sagebrush"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sagraves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("saia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("saif"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("saitama"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sakai"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sakau"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sakigake"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sakurai"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("salemme"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("salesman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("salesmanship"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("salesmen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("salespeople"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("salesperson"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("saleswoman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("saleswomen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("salisbury"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("salle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("salome"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("salomone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("salvadore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("salvage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("salvaged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("salvatore"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("salve"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("salves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("salzhauer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("samelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sameness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("samoa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sampled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("samuela"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("samuels"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("samuelson"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sanches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sancia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sandage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sandbagged"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sande"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sanded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sandwiched"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sandwiches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sannes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sansui"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("santacroce"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("santaniello"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("santayana"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("santerre"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("santiago"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("santone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("santore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("santoyo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sanville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sanzone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("saone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sapiens"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sapoa"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sapone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sapphire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sarcasm"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sarcastically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sarette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sarine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sarkisian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sarkissian"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sarles"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sasse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sassone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("satiny"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("satire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("satires"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("satirizes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("satisfactorily"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("satisfactory"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sattler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("saucepan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sauces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sausage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sausages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("saute"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sauter"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sauternes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sauvage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sauvageau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("savage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("savaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("savagely"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("savages"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("savarese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("saville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("savior"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("saviors"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("savoia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("savoie"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("savr"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sawaya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sawtelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sawyer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sawyers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sayad"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sayed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sayegh"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sbf"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scaccia"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("scaglione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("scalese"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scapegoat"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("scapegoating"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scapegoats"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scarface"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("scarpone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("scarves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schadler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schaedler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schaefers"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("scharfe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schaufler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schedler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("scheidler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scherer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("scheufler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scheunemann"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("schiavone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schickler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schickling"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schielke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schiewe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schildknecht"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schilke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schimke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schinke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schisler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schisms"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schloesser"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schmidl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schmutzler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schnelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schoene"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schoening"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("scholle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("scholtes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("scholze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schoneman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schoppe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schouten"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schreder"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schreyer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schroedl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schubring"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schuelke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schuerman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schuermann"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schuessler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schuette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schuetze"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schulte"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schultes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schultze"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schulze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schuneman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schussler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schutte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schuttler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schwalbe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schwanke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schwantes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schwarze"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schwebke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schweder"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schweer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schweers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schwegler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("schwendeman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schwenke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schweppe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("schweppes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("schwoerer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sciacca"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("scialdone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sciandra"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scianna"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sciara"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sciarrino"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sciascia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sciclone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("science"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sciences"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("scientific"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("scientifically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("scientifics"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("scientist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("scientists"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("scientology"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("scintilore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scion"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("scipione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scohier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scolded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sconces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scoreboard"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scorecard"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("scorekeepers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("scorpion"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("scorpions"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scotches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scour"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scoured"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scourges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("scouring"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scours"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scoville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scrambled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scratches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("screeches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scribbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scribblers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scrimgeour"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scrimmage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scrivener"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("scrutinizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("scuffled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sdn"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("se"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seabed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seaborne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("searches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("searle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("seattle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sebaceous"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("sebastiana"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sebastiane"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("sebastiani"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("seceding"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sechrest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sechrist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("seconded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("secrest"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("secretiveness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("secrist"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("securites"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("seditious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sedore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seduce"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seduced"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seepage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("seer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("seers"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("seethe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("segraves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("segrest"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("segue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seidl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("seifried"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("seigler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("seigniorage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("Seiichi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("seiyaku"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seiyu"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sekisui"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("selbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seles"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("selke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("selle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sellier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("selvage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("selves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("semele"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("semiautomatic"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("semionenkov"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("semireligious"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("semmes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("semmler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("semones"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("senatore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("senior"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("seniority"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("seniornet"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seniors"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("senne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sense"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("senseless"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sensitiveness"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("senske"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sentelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sentenced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sentences"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seo"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("seoul"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seow"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("separate"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("separateness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sequeira"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sequences"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sequoia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sequoias"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sequoyah"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("serafine"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("seraphine"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("serenely"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sergius"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("serpe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("serratore"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("serves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("service"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("serviced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("serviceman"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("servicemaster"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("servicemen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("services"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sesame"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("Sese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sesler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sessler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("settlers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seve"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("seventieth"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("several"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("severally"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("severing"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sevier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("seville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sewage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sewerage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sexes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("seyfried"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sfernice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sh"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shackled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shakedown"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shakedowns"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shakeout"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shakespeare"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shampooed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shaquille"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sharecroppers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shareholder"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shareholders"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shareholding"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shareholdings"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shareware"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sharpe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sharpeville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sheathe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sheathed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sheer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sheffler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shelburne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shelbyville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("shelve"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("shelves"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("shenandoah"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sheneman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shepherded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sherborne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sherbourne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sherburne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shidler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shielded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shiffler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shigeo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shiina"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("shionogi"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("shiraishi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shiremanstown"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shisler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shissler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("shiu"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shivering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shiyuan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shoelace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shoelaces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shoichi"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("shoichiro"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("shooed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("shoppe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("shoppes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shor"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shorebird"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shoreham"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shoreward"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shortage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shortages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shortchanged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shoshone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("shouldnt"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shoveling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("showcases"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("showering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("showpiece"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("showplace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shredded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shreffler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shreveport"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shrikelike"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shrinkage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shryock"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("shuddered"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shuey"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shuffled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shuffling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("shui"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("siang"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sias"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sibelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sibille"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sibling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("siblings"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sichuan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sicilia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sicotte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sidekick"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sideline"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sidelined"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sidelines"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sideman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sideshow"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sidestep"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sidestepped"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sidestepping"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sidesteps"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sidestream"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sidetrack"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sidetracked"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sidewalk"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sidewalks"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sidewater"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sideways"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sidewinder"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sidewise"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sidler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("siegecraft"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sienko"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sierra"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sierracin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sierras"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("siers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("siewiorek"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sigl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sigler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("signage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("signore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("silenced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("silences"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sileo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("silhouette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("silhouettes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("silverthorne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("simeon"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("simeone"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("simione"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("simler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("simoneau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("simoneaux"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("simonette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("simpleminded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("simpler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("simplesse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sincavage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("Sindayen"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("singaporean"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("singaporeans"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("singled"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("singlehandedly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("singler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("singling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sinuous"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sinuses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("siobhan"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sioux"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("siracuse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sirrine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sisemore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sisler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sistare"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sithe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sitler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sittler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sitze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sixes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sixtieth"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sizeler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sizelove"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sizemore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sizzled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sizzler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("skateboard"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("skateboarding"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("skeoch"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sketches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("skewering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("skibbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("skidded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("skier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("skrzypek"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("skyboxes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("slaughterhouses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sledgehammer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("slices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("slippage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("slouches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("smokejumper"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("smokejumpers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("smokescreen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("smokestack"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("smokestacks"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("smoothed"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("smtih"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("smuggled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("smythe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("snakebites"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("snakelike"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("snarled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("snatches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sneer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sneers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("soares"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sobering"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sobieski"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("socia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sociable"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("societa"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("societal"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("societe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("societies"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("society"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sociopath"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("socrates"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sofaer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("softimage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("soileau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sokaiya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("solace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("solares"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("soldier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("soldiering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("soldiers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("soledad"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("solesbee"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("solimine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("soloist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("soloists"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("soltes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("solve"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("solves"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("somebody"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("someday"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("somehow"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("somerville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("something"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("somethings"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sometime"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sometimes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("somewhat"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("somewhere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sommerville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sonia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sonne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("soothe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("soothed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("soothes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sooy"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sophomore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sophomores"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sorbonne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sorcerer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sorcerers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sorice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sosuke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sotomayor"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("soulliere"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sounded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sour"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sourcebook"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sources"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("soured"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("souring"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sourly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sourrouille"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sours"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("Sousuke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sovereign"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sovereigns"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sovereignty"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sovetskaya"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("soviet"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("sovietologist"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("sovietologists"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("soviets"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sowle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sowles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("soya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("soyars"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("soysauce"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("soyuz"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spaceballs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spacebands"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spacecraft"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spacelink"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spacenet"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spaceport"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spaces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spaceship"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spaceships"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spacesuit"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spadework"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("spagnuolo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spangled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("spangler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spaniard"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spaniards"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spanier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spaniol"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sparkes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sparkled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spasm"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spasms"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("speciale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("specialities"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("speciality"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("specializes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("specifically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("speckled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("speeches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("speer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("spengler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("speziale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spieth"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("spilde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("spinale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("spindler"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("spiritualism"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("spitale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spittler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("splices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spoilage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spokeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spokesman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spokesmen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("spokespeople"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("spokesperson"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("spokeswoman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("spokewoman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sponges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sponsler"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("spontaneity"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spoonemore"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sporadically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sporleder"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sporophyte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sporophytes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("spouses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("spracklen"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sprague"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("springerville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sprinkled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("spruiell"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("squabbled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("squeak"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("squeaked"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("squeaker"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("squeakers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("squeaking"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("squeaks"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("squeaky"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("squeal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("squealing"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("squeals"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("squeamish"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("squeamishness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("squeegee"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("squeeze"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("squeezed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("squeezing"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("squiers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("squillace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("squires"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sr"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("stabilizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stablest"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stacia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("staebler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("staehle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stagecoach"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stagecraft"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stagehands"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("staggering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stahnke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stai"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("staircases"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stakeholder"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stakeholders"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stakeout"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stakeouts"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stalemate"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stalemated"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stampeding"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stances"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stangl"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stangler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stanke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("stanzione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stapled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stapler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("staplers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stapling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("starace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("starches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("starke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("starkes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("starnes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("starpointe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("statecraft"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("statehood"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("statehouse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("statement"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("statements"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stateroom"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stateside"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("statesman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("statesmanship"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("statesmen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stateswest"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("statewide"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("statistician"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("statisticians"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stayover"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stayovers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("steakhouses"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stearne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stechschulte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("steenkiste"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("steer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("steers"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("steffe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("steffes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("steffler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stefl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stegeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stegemann"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stegemeier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("steidl"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("steinke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stemmler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stephenville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stepien"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("steppe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("steppes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stereo"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("stereographic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stereos"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("stereotype"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("stereotyped"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("stereotypes"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("stereotypical"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("stereotyping"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sterilizes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sterne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stettler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("steuart"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("steubenville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stickler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stiegemeier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stiffler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stifled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stille"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stineman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stinnette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stitches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stiteler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stobbe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("stockbrokerage"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("stockbrokerages"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stocke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stoeltze"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stoever"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stoia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stoic"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("stoicism"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stoics"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stokke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("stolichnaya"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stolle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stolpe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stolte"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stolze"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stoneback"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stoneberg"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stoneberger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stoneburner"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stonecipher"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stonecutters"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stoneham"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stonehenge"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stonehill"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stonehocker"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stonehouse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stoneking"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stoneman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stoneridge"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stonerock"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stonestreet"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stonewall"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stonewalled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stonewalling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stoneware"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stooges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stoppage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stoppages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stopwatches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("storage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("storagetek"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("storefront"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("storefronts"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("storehouse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("storekeepers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("storeroom"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stormes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stracke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("straddled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("straddling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("straggled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stragglers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("straitlaced"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("strande"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stranded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("strangeness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("strangled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("strangling"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("strategically"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("strehle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stretches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("striar"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("stribling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("stricklen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("strieter"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("strikebreakers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("strikeout"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("strikeouts"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stromme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("strubbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("struggled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("strzelecki"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stubbe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stucke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("studded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stumbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stumpage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("stumpe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sturges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stutesman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("stuteville"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("stylistically"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("styron"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("suarez"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("suasion"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("suave"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("suazo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("submerged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("subnotebook"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("subservience"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("subservient"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("subsidizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("substances"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("substantiate"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("substantiated"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("substantiates"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("substantiation"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("subsurface"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("subterfuge"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("subterranean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("subtler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("subtly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sudafed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sudler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("suey"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("suez"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("suffice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sufficed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("suffices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("suffrage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("suffragettes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("suggestiveness"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sugiyama"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("suhre"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sui"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("suicidal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("suicide"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("suicides"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("suisse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("suitcases"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sukiyaki"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("summarizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("summerville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sumptuous"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sunde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sundial"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("sunobe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("supercharged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("superfamily"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("superfluidity"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("superfluous"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("superseding"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("superstitious"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("supervises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("superx"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("suppes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("supposedly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("supposes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("supremely"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("supremes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("surace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("surcharges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("surette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("surface"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("surfaced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("surfaceness"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("surfaces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("surges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("surmises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("surpluses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("surprises"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("surrealisms"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("surreptitious"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("surreptitiously"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("surrette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("surrounded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("surtaxes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("surveyor"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("surveyors"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("susanne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("susette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("suspended"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("suspense"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("suspenseful"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sutcliffe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("suttmeier"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("suu"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("suzanne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("suzette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("svelte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sverige"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("swaggering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("swanke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("swatches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("swathed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("sweers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("swinburnes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("swindled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("swindler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("swinehart"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("swingler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("switches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("swoveland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("sybille"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("symbion"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("symbolizes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("symmes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sympathizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("synagogue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("synagogues"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("synthetically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("sypniewski"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("syringes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("systematically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("systemically"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("taaffe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tabares"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tableau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tableaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tabled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tacke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tackled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tactician"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tacticians"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("taddeo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tadeusz"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("taffe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("taflinger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tafoya"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tagliaferri"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tague"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("taira"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("taiyo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("takao"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("takashimaya"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("takayama"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("takecare"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("takeo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("takeout"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("takeuchi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("talmage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tamales"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tamayo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tanabe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tangeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tangiers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tangled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tania"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tanke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tannehill"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("taormina"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tapering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tappe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tarleton"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("tartaglione"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tarte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tasm"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tassone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("taste"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tasteful"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tastefully"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tasteless"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tastes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tatiana"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tattler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tattooed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tauruses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tavares"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("tavoulareas"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("taxes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tb"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tbilisi"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tcas"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("teaches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("teague"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("teases"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("teate"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tebbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tebeau"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tebuthiuron"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("technician"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("technicians"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("technique"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("techniques"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("teenage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("teenaged"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("teer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tele"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("teleconference"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("teleconferencing"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("telemanagement"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("telemecanique"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("telephoniques"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("telesciences"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("televideo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("telexes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("telles"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("temme"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("temperament"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("temperamental"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("temperamentally"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("temperaments"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("temperate"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("temperature"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("temperatures"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("templer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tendentious"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tenn"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tennessean"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tense"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tensely"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("teo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("teodoro"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("teriyaki"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("termeer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ternes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("terrace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("terraced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("terraces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("terrien"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("terrifically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("terrorizes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("teruya"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("teske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tesler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tesmer"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tessitore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tessler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tetreault"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tetsuo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("th"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("thaddea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("thaddeus"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thalia"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tharpe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thatches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thatll"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thea"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theater"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theaters"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theatre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theatres"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("theatrical"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("theatricality"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("theatrically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thebeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theism"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("thematically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("themselves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thenceforth"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("theo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theobald"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("theocracy"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("theocratic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theodor"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("theodora"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theodore"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("theodorou"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theodric"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theola"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("theologian"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("theological"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("theology"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("theon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("theone"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("theophania"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("theophila"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theora"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("theoretical"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("theoretically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theorist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theorists"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theorize"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theorized"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("theorizes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("theorizing"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thereby"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thered"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("therefore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("theriault"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("thermonuclear"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("therriault"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("theses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("thibadeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thibeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thibeault"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thibeaux"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("thibedeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("thibodeau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("thibodeaux"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thielemann"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("thielke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("thinnes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("thirtieth"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("thirtysomething"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thoene"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("thoennes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("thomases"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("thomasine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("thomasville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("thoreau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("thorne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("thoroughbred"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("thorpe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("throneberry"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tiananmen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tianjin"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tiano"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tiara"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tickled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ticklish"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tidewater"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tiedeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tiedemann"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tier"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tiers"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tietje"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tietmeyer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tietze"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tigue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tijuana"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tilles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("timeframe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("timeliness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("timeplex"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("timeshare"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("timetable"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("timetables"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("timisoara"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("timme"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("timothea"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("timpe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("timpone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tingler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tingling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tinkled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tinkler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tinkling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tipler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tire"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tired"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tireless"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tiremaker"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tires"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tischler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("titania"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tithe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("titusville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tocqueville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toddler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toddlers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toddling"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("toelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toews"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toffler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tofte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toggled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toggling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tokuo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tokuyama"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tokyo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tolerances"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tolle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tolles"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tomaino"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tomasine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tomeo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tondreau"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tongue"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tongued"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tongues"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toniest"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tonnage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tonnages"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tonne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tonnes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tonnesen"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("toothed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toothpaste"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toothpastes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toppled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("torches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("torme"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tornabene"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tornatore"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("torosian"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("torque"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("torre"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("torreon"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("torsiello"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tortoises"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tortorice"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("tortoriello"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("torturous"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("toshiyuki"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("toste"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("totzke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("touareg"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("touches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("touchette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tourangeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tourville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tousled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("towering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("towle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("towne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("townes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("townhouses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("toyama"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toyo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("toyobo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("toyoda"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("toyoo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("toyota"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("toyotas"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("traces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("trachea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("tracheophytes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trackage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trademark"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trademarked"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trademarks"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tradesmen"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("traditionalists"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("traer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("trageser"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tragically"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("traipse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tramiel"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("trampe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trampled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tranches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("transcended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("transience"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("transients"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("transimage"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("transoceanic"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("transpired"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("transpires"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("trappe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("travelogue"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("trbovich"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("treatises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trebled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trefgarne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("treharne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("treichler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trembled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("treml"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trenches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trended"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trendier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trendiest"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("treon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tressler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("triage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tribesmen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tricia"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trickled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("triennial"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("trieste"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("trieu"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("triggering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trimedyne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("trimpe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("triomphe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tripled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tripling"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("trippe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("trisler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trivette"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("trivializes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("troia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("troiani"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tropea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("troubled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("trousdale"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("troyan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("troyanos"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("troyat"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("troyu"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trudeau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trudges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("truell"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("truest"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("truex"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("truism"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("trulove"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("trundled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("trusler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tryart"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tryin"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tryon"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tryout"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tryouts"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("trzaska"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("trzcinski"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("trzeciak"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ts"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tsiang"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tsui"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tsuneo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tuberville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tufte"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tuinstra"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tuition"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tuitions"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tumbled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tumbler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tumblers"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("tunde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tunisian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tunkelang"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("turberville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("turbeville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("turbocharged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("turbocharges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("turcotte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("turenne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("turnage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("turquoise"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("turrentine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("turville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tussled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("tutelage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tvsat"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("twelve"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("twentieth"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("twinkling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("twitches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("tyo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("typecast"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("typecasting"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("typefaces"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("typeset"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("typesetting"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("typewriter"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("typewriters"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("typewriting"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("typewritten"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("typically"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("uarco"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("uart"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ubiquity"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("udelle"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("uehara"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ueki"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("uemura"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("uhde"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ukulele"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ulfred"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ulloa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("umbrage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("umpire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("umpires"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("unabashedly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unabridged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unacknowledged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unamended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unannounced"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("unashamedly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unattached"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unattended"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unbalanced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unbounded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unbranded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unbridled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unchallenged"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("unchanged"));
            $this->assertEquals(7, $this->TextStatistics->syllable_count("uncharacteristically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("uncomfortably"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("uncontroversial"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unconvinced"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("uncooperative"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("uncoordinated"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("uncovering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("unctuous"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("undamaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("underage"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("underfinanced"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("underfunded"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("underhanded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("underprice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("underpriced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("underserved"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("understatement"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("undeserved"));
            $this->assertEquals(7, $this->TextStatistics->syllable_count("undifferentiated"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("unearthed"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("unemployable"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unexpired"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unfamiliar"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("unfamiliarities"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("unfamiliarity"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("unfenced"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unfolded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unfounded"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unfunded"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("Ungeheuer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ungerer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unguarded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("unhedged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unheralded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("unhinged"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("uninitiated"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("uninspired"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unintended"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("uninterested"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("uninteresting"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unionfed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("unique"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("uniquely"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("uniqueness"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("uniroyal"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unmanage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unmanaged"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("unmatched"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("unnerved"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unnoticed"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unpayable"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("unplaced"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("unplugged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unpretentious"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unprincipled"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("unreality"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unrealized"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unreasonable"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unreasoning"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unrecorded"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unreimbursed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unruffled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("unscathed"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("unscientific"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("unshackled"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("unsubstantiated"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("untermeyer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("untouched"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("untroubled"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("unwavering"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("updegrove"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("upended"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("uplinger"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("upstage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("upstaged"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("Ural"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("urea"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("urges"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("uribe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("Urquart"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("urquhart"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("urrea"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("uruguayan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("usa"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("usage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("usages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("usair"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("usameribancs"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("usbancorp"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("usefulness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("usenet"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("uses"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ustrust"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("uthe"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("utilizes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("Uttar"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("utterances"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("uy"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("uyeda"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("uyehara"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("uyeno"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("Uzis"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vacaville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("vague"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vaguely"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vagueness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vaguer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("valade"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("valent"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("valeo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("valiant"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("valiantly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("valiente"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("valiquette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("valladares"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("valle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("valleau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vallely"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("valles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vallette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("valliere"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vallone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("valonia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("valores"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("valuable"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("valuables"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("valve"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("valves"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("vanacore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vanasse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vandamme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("vande"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("vanderleest"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vanderlinde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vandermeer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vanderslice"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("vandersluis"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vandervelde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vandevelde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vandevoorde"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vandewalle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vandezande"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vanevery"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vanhecke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vanhorne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("vanhouten"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vanleer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vanleeuwen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vanliew"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vannguyen"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vannice"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vanscoyoc"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vanscyoc"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vantage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vantages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vantine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vardeman"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("variances"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("varietal"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("varnadore"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("varnes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("varrone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("varves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vases"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("vaske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vassilios"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vastine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vaudeville"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vaudevillian"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("vaughan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vaxes"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("vecchione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vedette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("veer"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("veers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vegetable"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vegetables"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("veillette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("velayati"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("velte"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("venereal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("venice"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("venne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("venneman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("venturesome"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("venzke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("verbiage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("verdone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("verduin"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("verges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("verhage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("verine"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vermeer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vermette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("verne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("vernes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("veronique"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("verrette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("versace"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("versailles"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("versluis"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vertically"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("verville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vestige"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vestiges"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("veterinarian"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("veterinarians"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("veterinary"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("vette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vexatious"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("viau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("viceroy"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vices"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("victorine"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vidales"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vidalia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("video"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("videodisk"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("videodisks"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("videogame"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("videophone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("videos"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("videotape"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("videotaped"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("videotapes"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("videotaping"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("videotex"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("videotext"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("videotron"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("viejo"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vienna"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vienneau"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("viennese"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("viers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("viet"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vietcong"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vieth"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vietnam"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("vietnamese"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vietti"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vieyra"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vigeland"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("viglione"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vigneau"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vigneault"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vignette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vignettes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("vigue"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("villafane"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("village"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("villages"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("villareal"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("villasenor"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("villette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("villiers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vincelette"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("vindictiveness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vineland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vingmed"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("vinje"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vintage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vintages"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("violation"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("violations"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("violette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("VIP"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("virginia"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("virginian"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("virginians"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("virkler"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("virtuosity"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("virtuoso"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("viruses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("visage"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("visualization"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("visualize"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("visualizing"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("visually"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("visuals"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("visx"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vitale"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("vitiello"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("viverette"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vivien"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("viyella"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("vizcaino"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vizcaya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vlcek"));
            $this->assertEquals(6, $this->TextStatistics->syllable_count("vnesheconombank"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("voce"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("vocke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("voges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vogl"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("vogue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("voiceless"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("voicemail"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("voices"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("voiceworks"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("volcanically"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("volentine"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("volle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("volpe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("voltage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("voltages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("volunteer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("volunteers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vorhauer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vosler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("voyage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("voyaged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("voyager"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("voyagers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("voyages"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("voyeur"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("voyeurism"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vrba"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("vrdolyak"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vremya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vs"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vsel"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("vuolo"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("vuong"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("w"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("waage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wadded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("waffled"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("waffling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wageman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wagering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wages"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wahle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("waidelich"));
            $this->assertEquals(5, $this->TextStatistics->syllable_count("wakabayashi"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wakefield"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wakeham"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wakeland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wakeley"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wakeman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("walde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("waleson"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("walfred"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("walke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wallace"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("walle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("walles"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("wallpapering"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("walruses"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wangled"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wanke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wannabe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wannabes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wantage"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wantages"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("warbling"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("warde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("warded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("warehime"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("warehouse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("warehoused"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("warehousing"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("warmongering"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("warne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("warnecke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("warnes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("washburne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wasmer"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wass"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("waste"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wastebasket"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wastebaskets"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wasteful"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wastefulness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wasteland"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wastepaper"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wastes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wastewater"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("watanabe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("watches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("waterbed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("waterborne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("waterlogged"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("watershed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("watling"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("watlington"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("watne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("watsonville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wavelength"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wavelengths"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wavering"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wavetek"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("waxes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("Wayans"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("waynesboro"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("waynesville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wedded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wedges"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wedgestone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wedgewood"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wedgeworth"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wednesday"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wednesdays"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wegrzyn"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wehde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("weiand"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("weide"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("weideman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("weidemann"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("weidler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("weigl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("weinger"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("weisse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("weist"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("welborne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("welded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("welke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("welle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("welles"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wellesley"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("welte"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wempe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wenches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wende"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wengler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wenke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wente"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wentzville"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wenzl"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("weppler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("werdesheim"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("wereldhave"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("werent"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("werewolf"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("werke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wermiel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wernecke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wernette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wernicke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("werre"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("weseman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wesemann"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wesler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wesleyan"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wess"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wessler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("westburne"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("westfaelisches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("westmoreland"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("weyand"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("weyandt"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("weyant"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("weyerhaeuser"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("whampoa"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("whatsoever"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wheezes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whereby"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wherehouse"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wherewithal"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitebread"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("whitecotton"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitefield"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitefish"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whiteford"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitehair"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitehall"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitehead"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitehill"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitehorn"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitehorse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitehouse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitehurst"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitelaw"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whiteley"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitelock"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whiteman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitemont"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitenack"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whiteneir"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitener"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whiteness"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitenight"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("whitescarver"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitesel"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitesell"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whiteside"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitesides"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitetail"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitewash"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whitewashed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("whitewater"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whittemore"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("whittling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("whoever"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wholehearted"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("wholeheartedly"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wholesale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wholesaler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wholesalers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wholesales"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wholesaling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wholesome"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wholesomeness"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("whosoever"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wicke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wicked"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wickedly"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wickes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wickliffe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("widebody"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wideman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("widespread"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wiedeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wiedemann"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wielded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wienecke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wienke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wier"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wiers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wiesemann"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wiggly"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wiitala"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wilbourne"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wilde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wildeman"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wildes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wildfire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wildfires"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wildflowers"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wileman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wilfred"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wilke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wilkes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wilkesboro"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("willabelle"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("willamette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wille"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("willes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("willette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("william"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("williams"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("williamsburg"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("williamsburgh"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("williamsen"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("williamson"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("williamsport"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("williamstown"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("williard"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wilmes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wilmette"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wiltse"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("winborne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("winded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("windes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wineberg"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("winegarden"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wineheim"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wineman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("winemiller"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("winfred"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wingler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("winifred"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("winne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("winterbourne"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wion"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wipeout"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wire"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wired"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wireline"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wireman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wires"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wiretaps"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wisecarver"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wisecrack"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wisecracking"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wisecracks"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wisecup"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wiseguy"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wisehart"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wiseman"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wisler"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("wisniewski"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wissler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("witches"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("witte"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("witteman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wittler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("witzke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("wlodarczyk"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("wlodarski"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wm"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wobbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wobbled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wobbly"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("woeste"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wolfe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wolke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wolle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wolske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wolstenholme"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wolves"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wooed"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("worcester"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("worded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("workplace"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("workplaces"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wotring"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wouldnt"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("woulfe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wounded"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wrangled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wrangler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wranglers"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wrangling"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wreckage"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wrenches"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wrestler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wretched"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wretchedly"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wrinkled"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wrinkling"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wristwatches"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("writedown"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("writedowns"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("wrzesinski"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("ws"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wuest"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wurdeman"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wussler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wyand"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wyant"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wyatt"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("wyeth"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wylde"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wynne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("wyoming"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("wythe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("xanthe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("xantippe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("xavier"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("xaviera"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("xian"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("xiaoping"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("xiaoyun"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("xinhua"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("xscribe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("xtra"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("xuan"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("yaffe"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("yahnke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("yamaichi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("yamane"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("yamatake"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("yamauchi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("Yanayev"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("yanke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("yarbrough"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yardage"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("yarde"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yarmulkes"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("yasuo"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("yasuyoshi"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("yearearlier"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yeates"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("yelle"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yeo"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("yerke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yeses"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("yeske"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yevette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yielded"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ying"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yinger"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("yingling"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ynez"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ynjiun"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yodice"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yohe"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("yoichi"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("yokoyama"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yolande"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("yoneyama"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("yongue"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("yonke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yorio"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("yorke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("yosemite"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yourselves"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("youville"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("yuille"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yuletide"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yvette"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("yvonne"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zaccone"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zaire"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zairean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zaireans"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("zairian"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("zairians"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("zakrzewski"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("zaniewski"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zanoyan"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zappone"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zarcone"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zaske"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("zaslavskaya"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zayac"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zayas"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zayed"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zeebrugge"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zegeer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zeidler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zeigler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zeisler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zeitler"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zelaya"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zelle"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zemke"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zeoli"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zeos"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zerbe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zeringue"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zettler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zhejiang"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zielke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("ziemke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zier"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zierke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zieske"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("ziesmer"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zigler"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zigzagged"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("zimbabwean"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zingale"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zingler"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zinke"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zion"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("zionism"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zionist"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zionists"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zions"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zirbes"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zises"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ziyad"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("ziyang"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zoe"));
            $this->assertEquals(2, $this->TextStatistics->syllable_count("zoete"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("zoologist"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("zoology"));
            $this->assertEquals(3, $this->TextStatistics->syllable_count("zorine"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zornes"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zuehlke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zuelke"));
            $this->assertEquals(1, $this->TextStatistics->syllable_count("zuhlke"));
            $this->assertEquals(4, $this->TextStatistics->syllable_count("zuidema"));
        }

    }

?>